#!/usr/bin/env bash
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
#  train-1.22
#  date: 15/09/2014
#
#  Copyright 2009, 2014, João L. A. C. Rosas
#
#  Special thanks to Hilário Leal Fontes and Maria José Machado,
#  who helped to test the script and made very helpful suggestions
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
# licenced under the GPL licence, version 3
# the Mosesdecoder (http://sourceforge.net/projects/mosesdecoder/), is a tool upon which this script depends that is licenced under the GNU Library or Lesser General Public License (LGPL)

# This script was based on instructions from several sources, especially the http://www.dlsi.ua.es/~mlf/fosmt-moses.html and the http://www.statmt.org/moses_steps.html web pages and the Moses, IRSTLM, RandLM and MGIZA documentation, as well as on research on the available literature on Moses, namely the Moses mailing list (http://news.gmane.org/gmane.comp.nlp.moses.user). The comments transcribe parts of the manuals of all the tools used.

# PURPOSE: 
#=========
# Given a Moses installation made with the create-* script, this script trains a bilingual corpus consisting of at least 1 file with segments in the source language and 1 file perfectly aligned with it with segments in the target language; it also uses 1 file in the target language to train a language model and another file in the target language for training recasing, and optionally 2 files (one in the source and one in the target language) for tuning and for testing the trained corpus (though not recommended, the corpus files can also be used for all these purposes); the trained corpus can then be used by the translate-* script in order to get actual translations of real texts. This script allows you to configure (see below) many of the parameters that it uses.

#  PRE-REQUIREMENTS:
#===================
# 1. The install-* script must have been run
# 2. Moses for Mere Mortals must have been created with the create-* script
# 3. If you want to make your own customized training, the corpus files must have been placed in $mosesdir/corpora_for_training and the make-test-files-* script must have then been run (this step should be ignored if you are using the demo corpus)

#####################################################################################
# The values of the variables that follow should be filled according to your needs:
#####################################################################################

#The file 'mt-location' defines $mosesdir for all scripts and is called by the `source` command below.

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#NOTE 1: The corpus that you want to train, together with the respective tuning files (if different), the testing files (if different), the file used for recasing, and the file used to build the language model (if different) should be placed in $mosesdir/corpora_for_training !!!
#NOTE 2: After the script is executed, you will find a report of what has been done (the corpus summary file) in $mosesdir/reports
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#=========================================================== 1. LANGUAGES ===============================================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# !!! The names of the languages should neither include spaces nor special characters, like asterisks, backslashes or question marks. Try to stick with letters, numbers, and the underscore, dash and dot if you want to avoid surprises. Avoid using a dash and the dot as the first character of the name. A 2 letter abbreviation is probably the ideal setting  !!!
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#Abbreviation of language 1 (source language) 
lang1=pt
#Abbreviation of language 2 (target language) 
lang2=en
#=========================================================== 2. FILES ===================================================================================
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# !!! The names of the files should not include spaces, as well as special characters, like asterisks, backslashes or question marks. Try to stick with letters, numbers, and the dash, dot, and underscore if you want to avoid Bash surprises. Avoid using a dash as the first character of a file name, because many Linux commands will treat it as a switch. If your files start with a dot, they'll become hidden files.!!!  
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#Basename of the corpus placed in $mosesdir/corpora_for_training (the default value refers to the 2 files 200000.for_train.en and 200000.for_train.pt, whose basename is 200000.for_train)
corpusbasename=200000.for_train

#Basename of the file used to build the language model (LM), placed in $mosesdir/corpora_for_training (!!! this is a file in the target language, having $lang2 as its extension; the extension should be omited when filling this parameter !!!)
lmbasename=300000

#Basename of the recaser training file, placed in $mosesdir/corpora_for_training (!!! this is a file in the target language, having $lang2 as its extension; the extension should be omited when filling this parameter !!!)
recaserbasename=300000

#Basename of the tuning corpus, placed in $mosesdir/corpora_for_training (the default value refers to the 2 files 200000.for_tuning.en and 200000.for_tuning.pt, whose basename is 200000.for_tuning)
#For a real corpus, other than the demo corpus, try to use files with 1000-2000 segments
tuningbasename=200000.for_tuning

#Basename of the test set files (used for testing the trained corpus), placed in $mosesdir/corpora_for_training (the default value refers to the 2 files 200000.for_test.en and 200000.for_test.pt, whose basename is 200000.for_test)
#For a real corpus, other than the demo corpus, try to use files with 1000 segments
testbasename=200000.for_test
#======================================================= 3. TRAINING STEPS ==============================================================================
#Number of processors of your computer that will be used by MGIZA (if you use all the processors available, the speed of the training will be considerably improved) 
#!!! To use all the cores available in your computer, leave this parameter empty!!!
cores=
#--------------------------------------------------------------------------------------------------------------------------------------------------------
#Reuse all relevant files that have already been created in previous trainings: 1= Do ; Any other value=Don't
reuse=1
#--------------------------------------------------------------------------------------------------------------------------------------------------------

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#NOTE 1: If in doubt, leave the settings that follow as they are; you will then do a full training with memory mapping, tuning, a training test and scoring of the training test of the demo corpus; the results will appear in $mosesdir/corpora_trained/evaluation and a report file will be available in $mosesdir/reports.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#Do parallel corpus training (quicker): 1= Do ; Any other value=Don't !!!
paralleltraining=1
#Number of the first training step (possible values: 1-9); choose 1 for a completely new corpus
firsttrainingstep=1
#Number of the last training step (possible values: 1-9); choose 9 for a completely new corpus
lasttrainingstep=9
#Do memory mapping: 1 = Do ; Any other value = Don't
memmapping=1
#Do a test (with scoring) of the training: 1 = Do ; Any other value = Don't
runtrainingtest=1
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# If you are new to Moses, stop here for the time being
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#======================================================= 4. LANGUAGE MODEL PARAMETERS  ==================================================================
# Use IRSTLM (1) or RandLM (5)
lngmdl=1
#Order of ngrams - the higher the better, but more memory required (choose between 3 and 9; good value: 5; default: 7)
Gram=7
#----------------------------------------------------*** 4.1. IRSTLM PARAMETERS ***----------------------------------------------------------------------
# Distributed language model: 1= Yes; Any other value = No (splits the file used to build the language model into parts, processes each part separately and finally merges the parts)
distributed=1
# Number of parts to split dictionary into balanced n-gram prefix lists (in the creation of a distributed language model); default: 20; !!! Only used if distributed = 1 !!!
dictnumparts=20
# Smoothing possible values: witten-bell (default); kneser-ney, improved-kneser-ney (default: improved-kneser-ney)
s='improved-kneser-ney'
# Quantize LM (Reduces memory comsumption at the cost of some loss of performance); 1 = Do ; Any other value = Don't. May induce some accuracy loss. Reduces the size of the LM.
quantize=0
# Memory-mapping of the LM. 1 = Do; Any other value = Don't. Avoids the creation of the binary LM directly in RAM (allows bigger LM at the cost of lower speed; often necessary when LM file is very big) !!!
lmmemmapping=1
#-----------------------------------------------------*** 4.2. RandLM PARAMETERS ***---------------------------------------------------------------------
# The format of the input data. The following formats are supported: for a CountRandLM, "corpus" (tokenised text corpora, one sentence per line); for a BackoffRandLM, 'arpa' (an ARPA backoff language model)
inputtype=corpus
# The false positive rate of the randomised data structure on an inverse log scale so '-falsepos 8' produces a false positive rate of 1/2^8
falsepos=8
# The quantisation range used by the model. For a CountRandLM, quantisation is performed by taking a logarithm. The base of the logarithm is set as 2^{1/'values'}. For a BackoffRandLM, a binning quantisation algorithm is used. The size of the codebook is set as 2^{'values'}
values=8
#======================================================= 5. TRAINING PARAMETERS ========================================================================
#----------------------------------------------------*** 5.1. TRAINING STEP 1 ***----------------------------------------------------------------------
#********** mkcls options
#Number of mkcls interations (default:2)
nummkclsiterations=2
#Number of word classes
numclasses=50
#----------------------------------------------------*** 5.2. TRAINING STEP 2 ***----------------------------------------------------------------------
#....................................................... 5.2.1. GIZA parameters .......................................................................
#maximum sentence length; !!! never exceed 101 !!!
ml=101
#No. of iterations:
#-------------------
#number of iterations for Model 1
model1iterations=5
#number of iterations for Model 2
model2iterations=0
#number of iterations for HMM (substitutes model 2)
hmmiterations=5
#number of iterations for Model 3
model3iterations=3
#number of iterations for Model 4
model4iterations=3
#number of iterations for Model 5
model5iterations=0
#number of iterations for Model 6
model6iterations=0
#
#parameters for various heuristics in GIZA++ for efficient training:
#------------------------------------------------------------------
#Counts increment cutoff threshold
countincreasecutoff=1e-06
#Counts increment cutoff threshold for alignments in training of fertility models
countincreasecutoffal=1e-05
#minimal count increase
mincountincrease=1e-07
#relative cutoff probability for alignment-centers in pegging
peggedcutoff=0.03
#Probability cutoff threshold for lexicon probabilities
probcutoff=1e-07
#probability smoothing (floor) value
probsmooth=1e-07
#
#parameters for describing the type and amount of output:
#-----------------------------------------------------------
#0: detailled alignment format, 1: compact alignment format
compactalignmentformat=0
#dump frequency of Model 1
model1dumpfrequency=0
#dump frequency of Model 2
model2dumpfrequency=0
#dump frequency of HMM
hmmdumpfrequency=0
#output: dump of transfer from Model 2 to 3
transferdumpfrequency=0
#dump frequency of Model 3/4/5
model345dumpfrequency=0
#for printing the n best alignments
nbestalignments=0
#1: do not write any files
nodumps=1
#1: write alignment files only
onlyaldumps=1
#0: not verbose; 1: verbose
verbose=0
#number of sentence for which a lot of information should be printed (negative: no output)
verbosesentence=-10
#
#smoothing parameters:
#---------------------
#f-b-trn: smoothing factor for HMM alignment model #can be ignored by -emSmoothHMM
emalsmooth=0.2
#smoothing parameter for IBM-2/3 (interpolation with constant))
model23smoothfactor=0
#smooting parameter for alignment probabilities in Model 4)
model4smoothfactor=0.4
#smooting parameter for distortion probabilities in Model 5 (linear interpolation with constant
model5smoothfactor=0.1
#smoothing for fertility parameters (good value: 64): weight for wordlength-dependent fertility parameters
nsmooth=4
#smoothing for fertility parameters (default: 0): weight for word-independent fertility parameters
nsmoothgeneral=0
#
#parameters modifying the models:
#--------------------------------
#0 = IBM-3/IBM-4 as described in (Brown et al. 1993); 1: distortion model of empty word is deficient; 2: distoriton model of empty word is deficient (differently); setting this parameter also helps to avoid that during IBM-3 and IBM-4 training too many words are aligned with the empty word); 1 = only 3-dimensional alignment table for IBM-2 and IBM-3
compactadtable=1
deficientdistortionforemptyword=0
#d_{=1}: &1:l, &2:m, &4:F, &8:E, d_{>1}&16:l, &32:m, &64:F, &128:E)
depm4=76
#d_{=1}: &1:l, &2:m, &4:F, &8:E, d_{>1}&16:l, &32:m, &64:F, &128:E)
depm5=68
#lextrain: dependencies in the HMM alignment model.  &1: sentence length; &2: previous class; &4: previous position;  &8: French position; &16: French class)
emalignmentdependencies=2
#f-b-trn: probability for empty word
emprobforempty=0.4
#
#parameters modifying the EM-algorithm:
#--------------------------------------
#fixed value for parameter p_0 in IBM-5 (if negative then it is determined in training)
m5p0=-1
manlexfactor1=0
manlexfactor2=0
manlexmaxmultiplicity=20
#maximum fertility for fertility models
maxfertility=10
#fixed value for parameter p_0 in IBM-3/4 (if negative then it is determined in training)
p0=0.999
#0: no pegging; 1: do pegging
pegging=0
#-----------------------------------------------------*** 5.3. TRAINING SCRIPT PARAMETERS ***------------------------------------------------------------
#Heuristic used for word alignment; possible values: intersect (intersection seems to be a synonym), union, grow, grow-final, grow-diag, grow-diag-final-and (default value), srctotgt, tgttosrc 
alignment=grow-diag-final-and
#Reordering model; possible values: msd-bidirectional-fe (default), msd-bidirectional-f, msd-fe, msd-f, monotonicity-bidirectional-fe, monotonicity-bidirectional-f, monotonicity-fe,  monotonicity-f
reordering=msd-bidirectional-fe
#Minimum length of the sentences (used by clean)
MinLen=1
#Maximum length of the sentences (used by clean)
MaxLen=60
#Maximum length of phrases entered into phrase table (max: 7; choose a lower value if phrase size length is an issue)
MaxPhraseLength=7
#-----------------------------------------------------*** 5.4. DECODER PARAMETERS  ***--------------------------------------------------------------------
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# !!! Only used in the training evaluation, and only if tuning = 0 !!!
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#***** QUALITY TUNING:
# Weights for language model (good values: 0.1-1; default: 1); ensures that output is fluent in target language
weight_l=1
# Weights for reordering model (good values: 0.1-1; default: 1); allows reordering of the input sentence
weight_d=1
# Weights for word penalty (good values: -3 to 3; default: 0; negative values favor large output; positive values favour short output); ensures translations do not get too long or too short
weight_w=0
#------------------------------------------
# Use Minumum Bayes Risk (MBR) decoding (1 = Do; Any other value = do not); instead of outputing the translation with the highest probability, MBR decoding outputs the translation that is most similar to the most likely translations.
mbr=0
# Number of translation candidates consider. MBR decoding uses by default the top 200 distinct candidate translations to find the translation with minimum Bayes risk
mbrsize=200
# Scaling factor used to adjust the translation scores (default = 1.0)
mbrscale=1.0
#------------------------------------------
# Adds walls around punctuation ,.!?:;". 1= Do; Any other value = do not. Specifying reordering constraints around punctuation is often a good idea. TODO not sure it does not require annotation of the corpus to be trained
monotoneatpunctuation=0
#***** SPEED TUNING:
# Fixed limit for how many translation options are retrieved for each input phrase (0 = no limit; positive value = number of translation options per phrase)
ttablelimit=20
# Use the relative scores of hypothesis for pruning, instead of a fixed limit (0= no pruning; decimal value = more pruning)
beamthreshold=0
# Threshold for constructing hypotheses based on estimate cost (default: 0 = not used).During the beam search, many hypotheses are created that are too bad to be even entered on a stack. For many of them, it is even clear before the construction of the hypothesis that they would be not useful. Early discarding of such hypotheses hazards a guess about their viability. This is based on correct score except for the actual language model costs, which are very expensive to compute. Hypotheses that, according to this estimate, are worse than the worst hypothesis of the target stack, even given an additional specified threshold as cushion, are not constructed at all. This often speeds up decoding significantly. Try threshold factors between 0.5 and 1
earlydiscardingthreshold=0

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#To get faster performance than the default Moses settings at roughly the same performance, use the parameter settings $searchalgorithm=1, $cubepruningpoplimit=2000 and $stack=2000. With cube pruning, the size of the stack has little impact on performance, so it should be set rather high. The speed/quality trade-off is mostly regulated by the -cube-pruning-pop-limit, i.e. the number of hypotheses added to each stack
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Search algorithm; cube pruning is faster than the traditional search at comparable levels of search errors; 0 = no cube pruning (default); 1 = turns on cube pruning
searchalgorithm=1
# Number of hypotheses added to each stack; only a fixed number of hypotheses are generated for each span; default is 2000, higher numbers slow down the decoder, may result in better quality
cubepruningpoplimit=2000
# Reduce size of hypothesis stack, that keeps the best partial translations (=beam); default: 2000
stack=2000
# Maximum phrase length (default: 20)
maxphraselen=20
# ****** SPEED AND QUALITY TUNING
# Minimum number of hypotheses from each coverage pattern; you may also require that a minimum number of hypotheses is added for each word coverage (they may be still pruned out, however). This is done using the switch -cube-pruning-diversity, which sets the minimum. The default is 0
cubepruningdiversity=0
# Distortion (reordering) limit in maximum number of words (0 = monotone; -1 = unlimited ; any other positive value = maximal number of words; default:6)); limiting distortion often increases speed and quality (in our experience, avoid values of 0 and -1; default: 6)
distortionlimit=6
#======================================================= 6. TUNING PARAMETERS ===========================================================================
#Do tuning.Possible values: no-tuning; apply-previous-weights ; tuning (default: no-tuning). Can lead, but does not always lead, to better results; takes ***much more*** time. You may want to train a corpus without tuning and afterwards do the tuning (reusing the previous training) to test the results. Default: no-tuning.
#In order to apply-previous-weights, a weight.ini file should be placed in $mosesdir/training_files and should have the same structure of the file that already exists in that location and with that name
tuning=no-tuning

# Maximum number of runs of tuning (Any positive number = maximum number of runs; only use values >=1)
maxruns=25

#Allowed values: mert, kbmira, pro (default: mert)
tuning_type=mert

#File name (without the path) of the file that has the sections of the moses.ini file with the weights that are to be used. Should be placed in $mosesdir/training_files
previous_weight_file="weight.ini"
####################################################################################
# DON'T CHANGE THE LINES THAT FOLLOW ... unless you know what you are doing!
####################################################################################

#=========================================================================================================================================================
# 1. Do some preparatory work
#=========================================================================================================================================================
# Register start date and time of corpus training 
startdate=`date +day:%d/%m/%y-time:%H:%M:%S`
a=$0
d1=`date +%s`
logname=${a##*/}-$d1

#Determine number of CPU cores that are to be used
num_cores=`grep -c ^processor /proc/cpuinfo`
if [ "$cores." == "." ]; then
  cores=$num_cores
else
  if [[ $cores -gt $num_cores ]]; then
    cores=$num_cores
  fi
fi

pwd="$PWD"

echo "********************** DO PREPARATORY WORK:"
#to avoid *** glibc detected *** errors with moses compiler
export MALLOC_CHECK_=0

echo "****** build names of parameters that will dictate the directory structure of the trained corpus files"
if [ "$lngmdl" = "1" ]; then
	lngmdlparameters="LM-$lmbasename-IRSTLM-$Gram-$distributed-$s-$quantize-$lmmemmapping"
elif [ "$lngmdl" = "5" ]; then
	lngmdlparameters="LM-$lmbasename-RandLM-$Gram-$inputtype-$falsepos-$values"
fi

#Use numeric codes in order to avoid file name length to exceed the upper Ubuntu limit (255 characters)
case "$alignment" in
'intersect')
alignmentcode="1";
;;
'intersection')
alignmentcode="9";
;;
'union')
alignmentcode="2";
;;
'grow')
alignmentcode="3";
;;
'grow-final')
alignmentcode="4";
;;
'grow-diag')
alignmentcode="5";
;;
'grow-diag-final-and')
alignmentcode="6";
;;
'srctotgt')
alignmentcode="7";
;;
'tgttosrc')
alignmentcode="8";
;;
*)
echo "The Moses training script parameter \$alignment has an illegal value. Exiting ...";
exit 1;
;;
esac

#Reordering model; possible values: msd-bidirectional-fe (default), msd-bidirectional-f, msd-fe, msd-f, monotonicity-bidirectional-fe, monotonicity-bidirectional-f, monotonicity-fe, monotonicity-f 
#Use numeric codes in order to avoid file name length to exceed the upper limit of characters
case "$reordering" in
'msd-bidirectional-fe')
reorderingcode="1";
param=wbe-$reordering;
;;
'msd-bidirectional-f')
reorderingcode="2";
param=wbe-$reordering;
;;
'msd-fe')
reorderingcode="3";
param=wbe-msd-backward-fe;
;;
'msd-f')
reorderingcode="4";
param=wbe-msd-backward-f;
;;
'monotonicity-bidirectional-fe')
reorderingcode="5";
param=wbe-$reordering;
;;
'monotonicity-bidirectional-f')
reorderingcode="6";
param=wbe-$reordering;
;;
'monotonicity-fe')
reorderingcode="7";
param=wbe-monotonicity-backward-fe;
;;
'monotonicity-f')
reorderingcode="8";
param=wbe-monotonicity-backward-f;
;;
*)
echo "The Moses training script parameter \$reordering has an illegal value. Exiting ...";
exit 1;
;;
esac

trainingparameters="T-$paralleltraining-$firsttrainingstep-$lasttrainingstep-MKCLS-$nummkclsiterations-$numclasses-MGIZA-$cores-GIZA-$ml-$model1iterations-$model2iterations-$hmmiterations-$model3iterations-$model4iterations-$model5iterations-$model6iterations-$countincreasecutoff-$countincreasecutoffal-$mincountincrease-$peggedcutoff-$probcutoff-$probsmooth-$compactalignmentformat-$model1dumpfrequency-$model2dumpfrequency-$hmmdumpfrequency-$transferdumpfrequency-$model345dumpfrequency-$nbestalignments-$nodumps-$onlyaldumps-$verbose-$verbosesentence-$emalsmooth-$model23smoothfactor-$model4smoothfactor-$model5smoothfactor-$nsmooth-$nsmoothgeneral-$compactadtable-$deficientdistortionforemptyword-$depm4-$depm5-$emalignmentdependencies-$emprobforempty-$m5p0-$manlexfactor1-$manlexfactor2-$manlexmaxmultiplicity-$maxfertility-$p0-$pegging-MOSES-$alignmentcode-$reorderingcode-$MinLen-$MaxLen-$MaxPhraseLength-$Gram-$weight_l-$weight_d-$weight_w-$mbr-$mbrsize-$mbrscale-$monotoneatpunctuation-$ttablelimit-$beamthreshold-$earlydiscardingthreshold-$searchalgorithm-$cubepruningpoplimit-$stack-$maxphraselen-$cubepruningdiversity-$distortionlimit"
if [ "$memmapping" = "1" ]; then
	mmparameters="M-1"
else
	mmparameters="M-0"
fi
if [ "$tuning" = "tuning" ]; then
	tuningparameters="Tu-$tuningbasename-$maxruns-$tuning_type"
elif [ "$tuning" = "apply-previous-weights" ]; then
  tuningparameters="Tu-prev_weights"
else
	tuningparameters="Tu-0"
fi
if [ "$runtrainingtest" = "1" ]; then
	evaluationparameters="E-$testbasename-$recaserbasename"
else
	evaluationparameters="E-0"
fi

echo "****** build name of directories where corpus trained files will be located"
#The file 'mt-location' defines $mosesdir for all scripts
source $( cd $(dirname $0) ; pwd -P )/mt-location
#Full path of the tools directory (giza, irstlm, moses, scripts, ...)
toolsdir="$mosesdir/tools"
#Full path of the files used for training (corpus, language model, recaser, tuning, evaluation) 
datadir="$mosesdir/corpora_for_training"
#Full path of the base directory where your corpus will be processed (corpus, model, lm, evaluation, recaser)
workdir="$mosesdir/corpora_trained"
#Full path of the language model directory
lmdir="$workdir/lm/$lang2/$lngmdlparameters"
#Full path of the tokenized files directory
tokdir="$workdir/tok"
#Full path of the cleaned files directory
cleandir="$workdir/clean/MinLen-$MinLen.MaxLen-$MaxLen"
#Full path of the lowercased (after cleaning) files directory
lc_clean_dir="$workdir/lc_clean/MinLen-$MinLen.MaxLen-$MaxLen"
#Full path of the lowercased (and not cleaned) files directory
lc_no_clean_dir="$workdir/lc_no_clean"
#Full path of the recaser files directory
recaserdir="$workdir/recaser/$lang2/$recaserbasename-IRSTLM"
#Full path of the trained corpus files directory
modeldir="$workdir/model/$lang1-$lang2-$corpusbasename.$lngmdlparameters/$trainingparameters"
#Root-dir parameter of Moses
rootdir=$modeldir
#Full path of the memory-mapped files directory
memmapsdir="$workdir/memmaps/$lang1-$lang2-$corpusbasename.$lngmdlparameters/$trainingparameters"
#Full path of the tuning files directory
tuningdir="$workdir/tuning/$lang1-$lang2-$corpusbasename.$lngmdlparameters.$mmparameters.$tuningparameters/$trainingparameters"
#Full path of the training test files directory
testdir="$workdir/evaluation/$lang1-$lang2-$corpusbasename.$lngmdlparameters.$mmparameters.$tuningparameters.$evaluationparameters/$trainingparameters"

#Avoid a nasty mistake that does not lead to an error message
if [ ! -f "$datadir/$lmbasename.$lang2" ]; then
	echo "A corpus training has to specify a valid language model file (parameter \$lmbasename, whose value is set to $lmbasename). If a LM with the same characteristics has already been built, then it will not be redone. For example, if you want to use the 1000.pt file, set this parameter to 1000 and that file should be placed in $datadir. Exiting ..."
	exit 1
fi

if [ "$lngmdl" != "1" -a "$lngmdl" != "5" ]; then
	echo "The language model builder parameter (\$lngmdl, whose value is set to $lngmdl) can only have the following values: 1 <-- IRSTLM or 5 <-- RandLM. Current value: $lngmdl. Exiting ..."
	exit 1
fi

if [ ! -f "$datadir/$corpusbasename.$lang1" -o ! -f "$datadir/$corpusbasename.$lang2" ]; then
	echo "$datadir/$corpusbasename.$lang1"
	echo "A corpus training has to specify a valid corpora files, one for the source and another for the target languages (parameter \$corpusbasename, whose value is set to $corpusbasename). For instance, if you want to use the files 1000.en and 1000.pt as the corpus files, this parameter should be set to 1000 and those files should be placed in $datadir. Exiting ..."
	exit 1
fi

if [ "$tuning" = "tuning" ]; then
  if (( $maxruns <= 0 )); then
	  echo "The parameter \$maxruns must be greater or equal to 1. Exiting ..."
	  exit 1
  fi
	if [ "$tuning_type" != "mert" -a "$tuning_type" != "pro" -a "$tuning_type" != "kbmira" ]; then
	  echo "The parameter \$tuning_type must have one of the following values: mert, pro or kbmira. Current value: $tuning_type. Exiting ..."
	  exit 1
	fi
fi

echo "****** create directories where training and translation files will be located"
#create the directory where you will put the documents to be translated
if [ ! -d "$mosesdir/translation_input" ] ; then mkdir -p "$mosesdir/translation_input" ; fi

#create the directory where you will put the documents that have been translated
if [ ! -d "$mosesdir/translation_output" ] ; then mkdir -p "$mosesdir/translation_output" ; fi

#create the directory where you will put the human translations that will be used for scoring the documents that have been translated
if [ ! -d "$mosesdir/translation_reference" ] ; then mkdir -p "$mosesdir/translation_reference" ; fi

#Create the logs directory (where will be stored the log of the current training)
if [ ! -d "$mosesdir/logs" ] ; then mkdir -p "$mosesdir/logs" ; fi

#Create the work directory (where the training files will be located)
if [ ! -d "$workdir" ]; then mkdir -p "$workdir"; fi

#Create the base language model directory
if [ ! -d "$workdir/lm" ]; then mkdir -p "$workdir/lm"; fi

#Create the current (specific) language model directory (current is a subdirectory of the base directory)
if [ ! -d "$lmdir" ]; then mkdir -p "$lmdir"; fi

#Create the tokenized files directory
if [ ! -d "$tokdir" ]; then mkdir -p "$tokdir"; fi

#Create the base cleaned files directory
if [ ! -d "$cleandir" ]; then mkdir -p "$cleandir"; fi

#Create the current lowercased (after cleaning) files directory
if [ ! -d "$lc_clean_dir" ]; then mkdir -p "$lc_clean_dir"; fi

#Create the current lowercased (and not cleaned) files directory
if [ ! -d "$lc_no_clean_dir" ]; then mkdir -p "$lc_no_clean_dir"; fi

#Create the base trained corpus directory
if [ ! -d "$workdir/model" ]; then mkdir -p "$workdir/model"; fi

#Create the current trained corpus files directory
if [ ! -d "$modeldir" ]; then mkdir -p "$modeldir"; fi

if [ "$memmapping" = "1" ]; then
	#Create base memory-mapping files directory
	if [ ! -d "$workdir/memmaps" ]; then mkdir -p "$workdir/memmaps"; fi
	#Create current memory-mapping files directory
	if [ ! -d "$memmapsdir" ]; then mkdir -p "$memmapsdir"; fi
fi

if [ "$tuning" != "no-tuning" ]; then
	#Create base tuning files directory
	if [ ! -d "$workdir/tuning" ]; then mkdir -p "$workdir/tuning"; fi
	#Create current tuning files directory
	if [ ! -d "$tuningdir" ]; then mkdir -p "$tuningdir"; fi
fi

if [ "$runtrainingtest" = "1" ]; then
	#Create base evaluation files directory
	if [ ! -d "$workdir/evaluation" ]; then mkdir -p "$workdir/evaluation"; fi
	#Create current evaluation files directory
	if [ ! -d "$testdir" ]; then mkdir -p "$testdir"; fi

	#Create base recaser files directory
	if [ ! -d "$workdir/recaser" ]; then mkdir -p "$workdir/recaser"; fi
	#Create current recaser files directory
	if [ ! -d "$recaserdir" ]; then mkdir -p "$recaserdir"; fi

fi

#Full path of the training reports 
report_dir="$mosesdir/reports/train"
mkdir -p "$report_dir" 2>/dev/null
#Full path of the training logs 
log_dir="$mosesdir/logs/train"
mkdir -p "$log_dir" 2>/dev/null

#Full path of a temporary directory used for translating
tmp="$mosesdir/$stampdate"

#define name of the report_file
report="$lang1-$lang2.C-$corpusbasename-$MaxLen-$MinLen.LM-$lmbasename.MM-$memmapping.$tuningparameters.`date +day-%Y-%m-%d.time-%H-%M-%S`.report"

echo "****** create some auxiliary functions"
#function that checks whether a trained corpus exists already
checktrainedcorpusexists() {
	if [ ! -f $modeldir/moses.ini ]; then
		echo -n "A previously trained corpus does not exist. You have to train a corpus first. Exiting..."
		exit 1
	fi
}

makeTrainingReport() {
	dontuse=0
  #Create corpus training report file
	echo "***************** Writing training summary"
  echo "#========================================================================" > "$report_dir/$report"
  echo "MMMdir=$pwd" >> "$report_dir/$report"
  echo "Script=$0" >> "$report_dir/$report"
  echo "#========================================================================" >> "$report_dir/$report"

	if [ ! -f "$modeldir/moses.ini" ]; then
		echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> "$report_dir/$report"
		echo "@ !!! THIS IS NOT A VALIDLY TRAINED CORPUS !!! DO NOT USE IT FOR TRANSLATION !!! @" >> "$report_dir/$report"
		echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" >> "$report_dir/$report"
		dontuse=1
	fi
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Duration ***: " >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "Start time:                    $startdate" >> "$report_dir/$report"
	echo "Start language model building: $startLMdate" >> "$report_dir/$report"
	echo "Start recaser training:        $startrecasertrainingdate" >> "$report_dir/$report"
	echo "Start corpus training:         $starttrainingdate" >> "$report_dir/$report"
	echo "Start memory-mapping:          $startmmpdate" >> "$report_dir/$report"
	echo "Start tuning:                  $starttuningdate" >> "$report_dir/$report"
	echo "Start test:                    $starttestdate" >> "$report_dir/$report"
	echo "Start scoring:                 $startscoringdate" >> "$report_dir/$report"
	echo "End time:                      `date +day:%d%m/%Y-time:%H:%M:%S`" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Languages*** :" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "Source language: $lang1" >> "$report_dir/$report"
	echo "Target language: $lang2" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Training steps in fact executed *** :" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	if [ ! -f "$lmdir/$lang2.$lngmdlparameters.blm.mm" -a ! -f "$lmdir/$lang2.$lngmdlparameters.BloomMap" -a ! -f "$lmdir"/*.lm.gz -a ! -f "$lmdir"/*.blm -a ! -f "$lmdir"/*.binary ]; then
		echo "Language model building executed=no. !!! THIS CORPUS CANNOT BE USED FOR TRANSLATION !!! Retrain it." >> "$report_dir/$report"
		dontuse=1
	else
		echo "Language model building executed=yes" >> "$report_dir/$report"
	fi
	if [ -f "$recaserdir/moses.ini" ]; then
		echo "Recaser training executed=yes" >> "$report_dir/$report"
	else
		echo "Recaser training executed=no. !!! THIS CORPUS CANNOT BE USED FOR TRANSLATION !!! Retrain it." >> "$report_dir/$report"
		dontuse=1
	fi
	if [ -f "$modeldir/moses.ini" ]; then
		echo "Corpus training executed=yes" >> "$report_dir/$report"
	else
		echo "Corpus training executed=no. !!! THIS CORPUS CANNOT BE USED FOR TRANSLATION !!! Retrain it." >> "$report_dir/$report"
		dontuse=1
	fi
	if [ "$paralleltraining" = "1" -a  -f "$modeldir/moses.ini" ]; then
		echo "Parallel training executed=yes" >> "$report_dir/$report"
	else
		echo "Parallel training executed=no" >> "$report_dir/$report"
	fi
	echo "First training step=$frsttrainingstep" >> "$report_dir/$report"
	echo "Last training step=$lasttrainingstep" >> "$report_dir/$report"
	if [ -f "$memmapsdir/reordering-table.$corpusbasename.$lang1-$lang2.$param.binlexr.srctree" ]; then
		echo "Corpus memmapping executed=yes" >> "$report_dir/$report"
	else
		echo "Corpus memmapping executed=no" >> "$report_dir/$report"
		if [ "$memmapping" = "1" ]; then
      echo "!!! Memmapping NOT DONE, though parameters of training specify it should be DONE!!!" >> "$report_dir/$report"
		fi
	fi
	if [ -f "$tuningdir/moses.tuning.ini" ]; then
		echo "Tuning executed=yes" >> "$report_dir/$report"
	else
		echo "Tuning executed=no" >> "$report_dir/$report"
	fi
	if [ -f "$testdir/$testbasename-src.$lang1.sgm" ]; then
		echo "Training test executed=yes" >> "$report_dir/$report"
	else
		echo "Training test executed=no" >> "$report_dir/$report"
	fi
	if [ "$score" != "" ]; then
		echo "Scoring executed=yes" >> "$report_dir/$report"
	else
		echo "Scoring executed=no" >> "$report_dir/$report"
	fi
	if [ "$score" != "" ]; then
		echo "========================================================================" >> "$report_dir/$report"
		echo "*** Score ***:" >> "$report_dir/$report"
		echo "========================================================================" >> "$report_dir/$report"
		echo "$score" >> "$report_dir/$report"
	fi
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Files and directories used:" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Moses base directory ***:" >> "$report_dir/$report"
	echo "$mosesdir" >> "$report_dir/$report"
	echo "------------------------------------------------------------------------" >> "$report_dir/$report"
	if [ -f "$lmdir/$lang2.$lngmdlparameters.blm.mm" -o -f "$lmdir/$lang2.$lngmdlparameters.BloomMap" -o -f "$lmdir"/*.lm.gz -o -f "$lmdir"/*.blm -o -f "$lmdir"/*.binary ]; then
		echo "*** File used to build language model ***: " >> "$report_dir/$report"
		echo "------------------------------------------------------------------------" >> "$report_dir/$report"
		echo "$lmdir/$lmbasename.$lang2" >> "$report_dir/$report"
	fi
	if [ -f "$recaserdir/moses.ini" ]; then
		echo "------------------------------------------------------------------------" >> "$report_dir/$report"
		echo "*** File used to build recasing model ***:" >> "$report_dir/$report"
		echo "$recaserdir/$lang2.$recaserbasename/$lang2.$recaserbasename" >> "$report_dir/$report"
	fi
	if [ -f "$modeldir/moses.ini" ]; then
		echo "------------------------------------------------------------------------" >> "$report_dir/$report"
		echo "*** File used for corpus training ***: " >> "$report_dir/$report"
		echo "$modeldir/$corpusbasename.$lang1" >> "$report_dir/$report"
		echo "$modeldir/$corpusbasename.$lang2" >> "$report_dir/$report"
	fi
	if [ "$tuning" = "tuning" ]; then
		if [ -f "$tuningdir/moses.tuning.ini" ]; then
			echo "------------------------------------------------------------------------" >> "$report_dir/$report"
			echo "*** Files used for tuning ***:" >> "$report_dir/$report" 
			echo "$workdir/tuning/$tuningbasename.$lang1" >> "$report_dir/$report"
			echo "$workdir/tuning/$tuningbasename.$lang2" >> "$report_dir/$report"
		fi
	fi
	if [ "$runtrainingtest" = "1" ]; then
		echo "*** Files used for testing training ***:" >> "$report_dir/$report" 
		if [ -f "$testdir/$testbasename-src.$lang1.xml" ]; then
			echo "------------------------------------------------------------------------" >> "$report_dir/$report"
			echo "$testdir/$testbasename.$lang1" >> "$report_dir/$report"
			echo "$testdir/$testbasename.$lang2" >> "$report_dir/$report"
		fi
	fi
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** Specific settings ***:" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	if [ "$reuse" = "1" ]; then
		echo "Reuse relevant files created in previous trainings=yes" >> "$report_dir/$report"
	else
		echo "Reuse relevant files created in previous trainings=no" >> "$report_dir/$report"
	fi
	echo "------------------------------------------------------------------------" >> "$report_dir/$report"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "+ Language model (LM) parameters:" >> "$report_dir/$report"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "------------------------ General parameters ----------------------------" >> "$report_dir/$report"
	echo "Language model builder=$lngmdl (0 = SRILM, 1 = IRSTLM; 5 = RandLM)" >> "$report_dir/$report"
	echo "Gram=$Gram" >> "$report_dir/$report"
	if [ "$lngmdl" = "1" ]; then
		echo "--------------------- IRSTLM parameters ------------------------" >> "$report_dir/$report"
		echo "distributed=$distributed" >> "$report_dir/$report"
		if [ "$distributed" = "1" ]; then
			echo "dictnumparts=$dictnumparts" >> "$report_dir/$report"
		fi
		echo "smoothing=$s" >> "$report_dir/$report"
		echo "quantized=$quantize" >> "$report_dir/$report"
		echo "memory-mmapped=$lmmemmapping" >> "$report_dir/$report"
	elif [ "$lngmdl" = "5" ]; then
		echo "--------------------- RandLM parameters ------------------------" >> "$report_dir/$report"
		echo "inputtype=$inputtype" >> "$report_dir/$report"
		echo "false positives=$falsepos" >> "$report_dir/$report"
		echo "values=$values" >> "$report_dir/$report"
	fi
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "+ Training Settings ***:" >> "$report_dir/$report"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "*************** mkcls options *********************************" >> "$report_dir/$report"
	echo "nummkclsiterations=$nummkclsiterations" >> "$report_dir/$report"
	echo "numclasses=$numclasses" >> "$report_dir/$report"
	echo "*************** MGIZA option **********************************" >> "$report_dir/$report"
	echo "cores=$cores" >> "$report_dir/$report"
	echo "*************** GIZA options **********************************" >> "$report_dir/$report"
	echo "maximum sentence length=$ml" >> "$report_dir/$report"
	echo "No. of iterations:" >> "$report_dir/$report"
	echo "m1=$model1iterations" >> "$report_dir/$report"
	echo "m2=$model2iterations" >> "$report_dir/$report"
	echo "mh=$hmmiterations" >> "$report_dir/$report"
	echo "m3=$model3iterations" >> "$report_dir/$report"
	echo "m4=$model4iterations" >> "$report_dir/$report"
	echo "m5=$model5iterations" >> "$report_dir/$report"
	echo "m6=$model6iterations" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "Parameters for various heuristics in GIZA++ for efficient training:" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "countincreasecutoff=$countincreasecutoff" >> "$report_dir/$report"
	echo "countincreasecutoffal=$countincreasecutoffal" >> "$report_dir/$report"
	echo "mincountincrease=$mincountincrease" >> "$report_dir/$report"
	echo "peggedcutoff=$peggedcutoff" >> "$report_dir/$report"
	echo "probcutoff=$probcutoff" >> "$report_dir/$report"
	echo "probsmooth=$probsmooth" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "Parameters describing the type and amount of output:" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "compactalignmentformat=$compactalignmentformat" >> "$report_dir/$report"
	echo "t1=$model1dumpfrequency" >> "$report_dir/$report"
	echo "t2=$model2dumpfrequency" >> "$report_dir/$report"
	echo "th=$hmmdumpfrequency" >> "$report_dir/$report"
	echo "t2to3=$transferdumpfrequency" >> "$report_dir/$report"
	echo "t345=$model345dumpfrequency" >> "$report_dir/$report"
	echo "nbestalignments=$nbestalignments" >> "$report_dir/$report"
	echo "nodumps=$nodumps" >> "$report_dir/$report"
	echo "onlyaldumps=$onlyaldumps" >> "$report_dir/$report"
	echo "verbose=$verbose" >> "$report_dir/$report"
	echo "verbosesentence=$verbosesentence" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "Smoothing parameters:" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "emalsmooth=$emalsmooth" >> "$report_dir/$report"
	echo "model23smoothfactor=$model23smoothfactor" >> "$report_dir/$report"
	echo "model4smoothfactor=$model4smoothfactor" >> "$report_dir/$report"
	echo "model5smoothfactor=$model5smoothfactor" >> "$report_dir/$report"
	echo "nsmooth=$nsmooth" >> "$report_dir/$report"
	echo "nsmoothgeneral=$nsmoothgeneral" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "Parameters modifying the models:" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "compactadtable=$compactadtable" >> "$report_dir/$report"
	echo "deficientdistortionforemptyword=$deficientdistortionforemptyword" >> "$report_dir/$report"
	echo "depm4=$depm4" >> "$report_dir/$report"
	echo "depm5=$depm5" >> "$report_dir/$report"
	echo "emalignmentdependencies=$emalignmentdependencies" >> "$report_dir/$report"
	echo "emprobforempty=$emprobforempty" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "Parameters modifying the EM-algorithm:" >> "$report_dir/$report"
	echo "---------------------------------------------------------------" >> "$report_dir/$report"
	echo "m5p0=$m5p0" >> "$report_dir/$report"
	echo "manlexfactor1=$manlexfactor1" >> "$report_dir/$report"
	echo "manlexfactor2=$manlexfactor2" >> "$report_dir/$report"
	echo "manlexmaxmultiplicity=$manlexmaxmultiplicity" >> "$report_dir/$report"
	echo "maxfertility=$maxfertility" >> "$report_dir/$report"
	echo "p0=$p0" >> "$report_dir/$report"
	echo "pegging=$pegging" >> "$report_dir/$report"
	echo "********************* Training script parameters **************" >> "$report_dir/$report"
	echo "alignment=$alignment" >> "$report_dir/$report"
	echo "reordering=$reordering" >> "$report_dir/$report"
	echo "MinLen=$MinLen" >> "$report_dir/$report"
	echo "MaxLen=$MaxLen" >> "$report_dir/$report"
	echo "MaxPhraseLength=$MaxPhraseLength" >> "$report_dir/$report"
	echo "********************* Moses decoder parameters **************" >> "$report_dir/$report"
	echo "NOTE: only used in testing if \$tuning = no-tuning" >> "$report_dir/$report"
	echo "********** Quality parameters **************" >> "$report_dir/$report"
	echo "weight-l=$weight_l" >> "$report_dir/$report"
	echo "weight-d=$weight_d" >> "$report_dir/$report"
	echo "weight-w=$weight_w" >> "$report_dir/$report"
	echo "mbr=$mbr" >> "$report_dir/$report"
	echo "mbr-size=$mbrsize" >> "$report_dir/$report"
	echo "mbr-scale=$mbrscale" >> "$report_dir/$report"
	echo "monotone-at-punctuation=$monotoneatpunctuation" >> "$report_dir/$report"
	echo "********** Speed parameters ****************" >> "$report_dir/$report"
	echo "ttable-limit=$ttablelimit" >> "$report_dir/$report"
	echo "beam-threshold=$beamthreshold" >> "$report_dir/$report"
	echo "stack=$stack" >> "$report_dir/$report"
	echo "early-discarding-threshold=$earlydiscardingthreshold" >> "$report_dir/$report"
	echo "search-algorithm=$searchalgorithm" >> "$report_dir/$report"
	echo "cube-pruning-pop-limit=$cubepruningpoplimit" >> "$report_dir/$report"
	echo "max-phrase-length=$maxphraselen" >> "$report_dir/$report"
	echo "********** Quality and speed parameters ****" >> "$report_dir/$report"
	echo "cube-pruning-diversity=$cubepruningdiversity" >> "$report_dir/$report"
	echo "distortion-limit=$distortionlimit" >> "$report_dir/$report"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "+ Tuning Settings ***:" >> "$report_dir/$report"
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" >> "$report_dir/$report"
	echo "Tuning=$tuning" >> "$report_dir/$report"
	echo "Maximum number of tunning runs=$maxruns" >> "$report_dir/$report"
	echo "Tuning package=$tuning_type" >> "$report_dir/$report"
	echo "###########################################################################################" >> "$report_dir/$report"
	echo "*** Parameters that will be used by other scripts ***:" >> "$report_dir/$report"
	echo "###########################################################################################" >> "$report_dir/$report"
	echo "In order to use this trained corpus for translation, please set the value of the \$report_file " >> "$report_dir/$report"
	echo "parameter of translate script as follows:" >> "$report_dir/$report"
	echo "report_file=$report_file" >> "$report_dir/$report"
	echo "The next parameters will be automatically filled in if you choose the right \$report_file name:" >> "$report_dir/$report"
	echo "lang1=$lang1" >> "$report_dir/$report"
	echo "lang2=$lang2" >> "$report_dir/$report"
	echo "corpusbasename=$corpusbasename" >> "$report_dir/$report"
	echo "language-model-parameters=$lngmdlparameters" >> "$report_dir/$report"
	echo "training-parameters=$trainingparameters" >> "$report_dir/$report"
	echo "memory-mapping-parameters=$memmapping" >> "$report_dir/$report"
	echo "memory-mapping-extra-parameters=$param" >> "$report_dir/$report"
	echo "tuning-parameters=$tuningparameters" >> "$report_dir/$report"
	echo "evaluation-parameters=$evaluationparameters" >> "$report_dir/$report"
	echo "minlen=$MinLen" >> "$report_dir/$report"
	echo "maxlen=$MaxLen" >> "$report_dir/$report"
	echo "recaserbasename=$recaserbasename" >> "$report_dir/$report"
	echo "lngmdl=$lngmdl" >> "$report_dir/$report"
	echo "###########################################################################################" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	echo "*** List of files created by the training ***:" >> "$report_dir/$report"
	echo "========================================================================" >> "$report_dir/$report"
	sort "$report_dir/corpus-files.txt" | uniq > "$report_dir/corpus-files-sorted.txt"
	cat "$report_dir/corpus-files-sorted.txt" >> "$report_dir/$report"
	if [ "$dontuse" = "1" ]; then
		mv -f "$report_dir/$report" "$report_dir/!!!INVALID!!!$report"
	fi
	rm "$report_dir/corpus-files.txt"
	rm "$report_dir/corpus-files-sorted.txt"
}

#function that avoids some unwanted effects of interrupting training
control_c() {
	makeTrainingReport	
	echo "****** Script interrupted by CTRL + C."
	exit 1
}

#--------------------------------------------------------------------------------------------------------------------------
echo "****** export several variables"
#full path to your moses scripts directory
export SCRIPTS_ROOTDIR="$toolsdir/scripts"
export IRSTLM="$toolsdir"
export PATH="$toolsdir"/mgizapp:$PATH
export RANDLM="$toolsdir/bin"
#export QMT_HOME="$toolsdir/mgizapp"
export corpusbasename
export lmbasename
export lang1
export lang2

echo "****************************************** Finishing environment setting"
	
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu

PREFIX="$toolsdir"
if [ -d /lib64 ]; then
  LIBDIR="$PREFIX/lib64"
else
  LIBDIR="$PREFIX/lib"
fi
export PATH="$PREFIX"/bin${PATH:+:$PATH}
export LIBRARY_PATH=$LIBDIR${LIBRARY_PATH:+:$LIBRARY_PATH}
export LD_LIBRARY_PATH=$LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
export CPATH="$PREFIX"/include${CPATH:+:$CPATH}


if [ ! -d "$LIBDIR" ]; then
	mkdir -p "$LIBDIR"
fi

Do_Language_Model(){
#=========================================================================================================================================================
#2. DO LANGUAGE MODEL
#=========================================================================================================================================================
startLMdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
echo "********************** BUILD LANGUAGE MODEL (LM):"

if [ -f "$datadir/$lmbasename.$lang2" ]; then
	echo "****** substitute problematic characters in LM file"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$lmbasename.$lang2.ctrl" ]; then
		tr '\a\b\f\r\v|' '     /' < "$datadir/$lmbasename.$lang2" > "$tokdir/$lmbasename.$lang2.ctrl"
	else
		echo "Substituting problematic characters in the $datadir/$lmbasename.$lang2 file already done. Reusing it."
	fi
	echo "****** tokenize LM file"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$lmbasename.tok.$lang2" ]; then
		"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l $lang2 < "$tokdir/$lmbasename.$lang2.ctrl" > "$tokdir/$lmbasename.tok.$lang2"
	else
		echo "Tokenizing of the $tokdir/$lmbasename.$lang2.ctrl file already done. Reusing it."
	fi
else
	echo "The $datadir/$lmbasename.$lang2 file, used for the language model (LM) building, does not exist. Please review the \$lmbasename and/or the \$lang2 settings of this script. LM building is done with a target language file. Exiting ..."
	exit 1
fi
echo "$tokdir/$lmbasename.$lang2.ctrl" >> "$report_dir/corpus-files.txt"
echo "$tokdir/$lmbasename.tok.$lang2" >> "$report_dir/corpus-files.txt"

echo "****** lowercase LM file"
if [ "$reuse" != "1" -o ! -f "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" ]; then
	"$toolsdir/scripts/tokenizer/lowercase.perl" < "$tokdir/$lmbasename.tok.$lang2" > "$lc_no_clean_dir/$lmbasename.lowercase.$lang2"
else
	echo "Lowercasing of the $tokdir/$lmbasename.tok.$lang2 file already done. Reusing it."
fi
echo "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" >> "$report_dir/corpus-files.txt"

echo "****** building LM"
# If LM built with IRSTLM ...
if [ "$lngmdl" = "1" ]; then
	if [ "$reuse" != "1" -o ! -f "$lmdir/$lang2.$lngmdlparameters.blm.mm" ]; then
		#if this operation was previously unsuccessful
		if [ -f "$lmdir/$lang2.$lngmdlparameters.lm.gz" ]; then
			rm -rf "$lmdir"
			mkdir -p "$lmdir"
		fi
		echo "****** build corpus IRSTLM language model (LM)"
		echo "*** build iARPA LM file"
		datestamp=`date +day-%d-%m-%Y-time-%H-%M-%S`
		if [ ! -d "/tmp/$datestamp" ]; then mkdir -p "/tmp/$datestamp"; fi
		if [ ! -f "$lmdir/$lang2.$lngmdlparameters.lm.gz" -a "$distributed" = "1" ]; then
			echo "*** distributed building of LM file; training procedure split into $k parts"
			"$toolsdir/bin/build-lm.sh" -t "/tmp/$datestamp" -i "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" -o "$lmdir/$lang2.$lngmdlparameters.lm.gz" -n $Gram -k $dictnumparts -s $s
		elif [ ! -f "$lmdir/$lang2.$lngmdlparameters.lm.gz" ]; then
			echo "*** non-distributed building of LM file"
			"$toolsdir/bin/build-lm.sh" -t "/tmp/$datestamp" -i "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" -o "$lmdir/$lang2.$lngmdlparameters.lm.gz" -n $Gram -s $s
		fi
		if [ ! -f "$lmdir/$lang2.$lngmdlparameters.blm.mm" ]; then
			if [ "$quantize" = "1" ]; then
				echo "*** quantize language model"
				"$toolsdir/bin/quantize-lm" "$lmdir/$lang2.$lngmdlparameters.lm.gz" "$lmdir/$lang2.$lngmdlparameters.qlm.gz"
				echo "*** binarize language model"
				"$toolsdir/bin/compile-lm" "$lmdir/$lang2.$lngmdlparameters.qlm.gz" "$lmdir/$lang2.$lngmdlparameters.blm.mm"
			else
				echo "*** binarize language model"
				"$toolsdir/bin/compile-lm" "$lmdir/$lang2.$lngmdlparameters.lm.gz" "$lmdir/$lang2.$lngmdlparameters.blm.mm"
			fi
		fi
		rm -rf "/tmp/$datestamp"
	else
		echo "Language model already exists in $lmdir/$lang2.$lngmdlparameters.blm.mm. Reusing it."
	fi
#... else if LM built with RandLM ...
elif [ "$lngmdl" = "5" ]; then
	if [ "$reuse" != "1" -o ! -f "$lmdir/$lang2.$lngmdlparameters.BloomMap" ]; then
		#if this operation was previously unsuccessful
		if [ -f "$lmdir/$lang2.$lngmdlparameters.counts.sorted.gz" -o -f "$lmdir/$lang2.$lngmdlparameters.gz" ]; then
			rm -rf "$lmdir"
			mkdir -p "$lmdir"
		fi

		if [ "$inputtype" = "corpus" ]; then
			echo "****** build corpus RandLM language model"
			cd $lmdir
			if [ ! -f "$lc_no_clean_dir/$lmbasename.lowercase.$lang2.gz" ]; then
				gzip -f < "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" > "$lc_no_clean_dir/$lmbasename.lowercase.$lang2.gz"
			fi
			echo "$lc_no_clean_dir/$lmbasename.lowercase.$lang2.gz" >> "$report_dir/corpus-files.txt"
			"$toolsdir/bin/buildlm" -struct BloomMap -order $Gram -falsepos $falsepos -values $values -output-prefix $lang2.$lngmdlparameters -input-type $inputtype -input-path "$lc_no_clean_dir/$lmbasename.lowercase.$lang2.gz"
		elif [ "$inputtype" = "arpa" ]; then
			echo "****** build ARPA RandLM language model"
			cd "$lmdir"
			"$toolsdir/bin/build-lm.sh" -i "$lc_no_clean_dir/$lmbasename.lowercase.$lang2" -n $Gram -o "$lmdir/$lang2.$lngmdlparameters.gz" -k $dictnumparts
			cd "$lmdir"
			"$toolsdir/bin/buildlm" -struct BloomMap -order $Gram -falsepos $falsepos -values $values -output-prefix $lang2.$lngmdlparameters -input-type $inputtype -input-path "$lmdir/$lang2.$lngmdlparameters.gz"
		fi
	else
		echo "Language model already exists in $lmdir/$lang2.$lngmdlparameters.BloomMap. Reusing it."
	fi
fi

for createdfile in `ls "$lmdir"`; do
	echo "$lmdir/$createdfile" >> "$report_dir/corpus-files.txt"
done

if [ -d "$lmdir/stat" ]; then
	for createdfile in `ls "$lmdir/stat"`; do
		echo "$lmdir/stat/$createdfile" >> "$report_dir/corpus-files.txt"
	done
fi

if [ ! -f "$lmdir/$lang2.$lngmdlparameters.blm.mm" -a ! -f "$lmdir/$lang2.$lngmdlparameters.BloomMap" -a ! -f "$lmdir"/*.lm.gz -a ! -f "$lmdir"/*.blm -a ! -f "$lmdir"/*.binary ]; then
	makeTrainingReport
	echo "Linguistic model not correctly trained. Exiting..."
	exit 1
fi

cd "$workdir"
}

Do_Recaser_Training(){
#=========================================================================================================================================================
#3. RECASER TRAINING
#=========================================================================================================================================================

startrecasertrainingdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
echo "********************** TRAIN RECASER WITH IRSTLM:"

if [ "$reuse" != "1" -o ! -f "$recaserdir/moses.ini" ]; then
	if [ -f $"recaserdir/cased.irstlm.$lang2.$recaserbasename.gz" ]; then
		rm -rf "$recaserdir"
		mkdir -p "$recaserdir"
	fi
	echo "****** Check recaser file exists"
	if [ ! -f "$datadir/$recaserbasename.$lang2" ]; then
		echo "The file $datadir/$recaserbasename.$lang2, used for recaser training, does not exist. Please review the \$recaserbasename and possibly the \$lang2 settings of this script. Exiting ..."
		exit 1
	fi

	cd "$toolsdir/scripts/recaser"
	echo "****** patch train-recaser.perl"
	sed -i'' -e's#^.*my \$cmd.*TRAIN\_SCRIPT.*$#\tmy $cmd = "$TRAIN_SCRIPT --root-dir $DIR --model-dir $DIR --first-step $first --alignment a --corpus $DIR/aligned --f lowercased --e cased --max-phrase-length $MAX_LEN --external-bin-dir toolsdir/mgizapp/bin --baseline-corpus recaserbasename";#g' train-recaser.perl
	sed -i'' -e"s#toolsdir#$toolsdir#g; s#recaserbasename#$recaserbasename#g" train-recaser.perl
	chmod +x train-recaser.perl
	echo "****** substitute control characters by space"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$recaserbasename.$lang2.ctrl" ]; then
		tr '\a\b\f\r\v|' '     /' < "$datadir/$recaserbasename.$lang2" > "$tokdir/$recaserbasename.$lang2.ctrl"
	else
		echo "Substitute control characters by a space in the $datadir/$recaserbasename.$lang2 file already done. Reusing it."
	fi
	echo "$tokdir/$recaserbasename.$lang2.ctrl" >> "$report_dir/corpus-files.txt"
	echo "****** tokenize recaser file"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$recaserbasename.tok.$lang2" ]; then
		"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l $lang2 < "$tokdir/$recaserbasename.$lang2.ctrl" > "$tokdir/$recaserbasename.tok.$lang2"
	else
		echo "Tokenizing of the $tokdir/$recaserbasename.$lang2.ctrl already done. Reusing it."
	fi
	echo "$tokdir/$recaserbasename.tok.$lang2" >> "$report_dir/corpus-files.txt"

	echo "****** train recaser"
  rm "$recaserdir/aligned.truecased" 2>/dev/null
	"$toolsdir/scripts/recaser/train-recaser.perl" -train-script "$toolsdir/scripts/training/train-model.perl" -corpus "$tokdir/$recaserbasename.tok.$lang2" -dir "$recaserdir" -scripts-root-dir "$toolsdir/scripts" -first-step 2 -lm IRSTLM
	mv "$recaserdir/cased.irstlm.gz" "$recaserdir/cased.irstlm.$lang2.$recaserbasename.gz"

	echo "****** binarize recaser language model"
	"$toolsdir/bin/compile-lm" "$recaserdir/cased.irstlm.$lang2.$recaserbasename.gz" "$recaserdir/cased.irstlm.$lang2.$recaserbasename.blm.mm"


	echo "****** create binary phrase table"
	cd "$recaserdir"
  gzip -cfd "$recaserdir/phrase-table.gz" | LC_ALL=C sort | "$toolsdir/bin/processPhraseTable" -ttable 0 0 - -nscores 5 -out "$recaserdir/phrase-table"

	echo "****** patch recaser's moses.ini"
  sed -i'' -e"s|^.*cased.*$|1 0 3 $recaserdir/cased.irstlm.$lang2.$recaserbasename.blm.mm|" "$recaserdir/moses.ini"
  sed -i'' -e's|phrase-table.gz|phrase-table|g' "$recaserdir/moses.ini"
else
	echo "Recaser training already done. Reusing it."
fi

for createdfile in `ls "$recaserdir"`; do
	echo "$recaserdir/$createdfile" >> "$report_dir/corpus-files.txt"
done

if [ ! -f "$recaserdir/phrase-table.binphr.tgtvoc" ]; then
	makeTrainingReport
	echo "Recaser not correctly trained. Exiting..."
	exit 1
fi
}

Do_Corpus_Training(){
#=========================================================================================================================================================
#4. TRAIN CORPUS
#=========================================================================================================================================================
starttrainingdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
echo "********************** CORPUS TRAINING:"
if [ "$reuse" != "1" -o ! -f "$modeldir/moses.ini" ]; then
	echo "****** substitute control characters by space in corpus files"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$corpusbasename.$lang1.ctrl" ]; then
		tr '\a\b\f\r\v|' '     /' < "$datadir/$corpusbasename.$lang1" > "$tokdir/$corpusbasename.$lang1.ctrl"
		echo "$lang1 file ($datadir/$corpusbasename.$lang1) done"
	else
		echo "Substitute control characters by a space in the $lang1 file ($datadir/$corpusbasename.$lang1) already done. Reusing it."
	fi
	echo "$tokdir/$corpusbasename.$lang1.ctrl" >> "$report_dir/corpus-files.txt"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$corpusbasename.$lang2.ctrl" ]; then
		tr '\a\b\f\r\v|' '     /' < "$datadir/$corpusbasename.$lang2" > "$tokdir/$corpusbasename.$lang2.ctrl"
		echo "$lang2 file ($datadir/$corpusbasename.$lang2) done"
	else
		echo "Substitute control characters by a space in the $lang2 file ($datadir/$corpusbasename.$lang2) already done. Reusing it."
	fi
	echo "$tokdir/$corpusbasename.$lang2.ctrl" >> "$report_dir/corpus-files.txt"
	echo "****** tokenize corpus files"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$corpusbasename.tok.$lang1" ]; then
		"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l  $lang1 < "$tokdir/$corpusbasename.$lang1.ctrl" > "$tokdir/$corpusbasename.tok.$lang1"
	else
		echo "The $tokdir/$corpusbasename.$lang1.ctrl file was already tokenized. Reusing it."
	fi
	echo "$tokdir/$corpusbasename.tok.$lang1" >> "$report_dir/corpus-files.txt"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$corpusbasename.tok.$lang2" ]; then
		"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l  $lang2 < "$tokdir/$corpusbasename.$lang2.ctrl" > "$tokdir/$corpusbasename.tok.$lang2"
	else
		echo "The $tokdir/$corpusbasename.$lang2.ctrl file was already tokenized. Reusing it."
	fi
	echo "$tokdir/$corpusbasename.tok.$lang2" >> "$report_dir/corpus-files.txt"
	#----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** clean corpus files" 
	if [ "$reuse" != "1" -o ! -f "$cleandir/$corpusbasename.clean.$lang1" -o ! -f "$cleandir/$corpusbasename.clean.$lang2" ]; then
		"$toolsdir/scripts/training/clean-corpus-n.perl" "$tokdir/$corpusbasename.tok" $lang1 $lang2 "$cleandir/$corpusbasename.clean" $MinLen $MaxLen
	else
		echo "The $cleandir/$corpusbasename.clean.$lang1 and $cleandir/$corpusbasename.clean.$lang2 files already exist. Reusing them."
	fi
	echo "$cleandir/$corpusbasename.clean.$lang1" >> "$report_dir/corpus-files.txt"
	echo "$cleandir/$corpusbasename.clean.$lang2" >> "$report_dir/corpus-files.txt"
	#----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** lowercase corpus files"
	if [ "$reuse" != "1" -o ! -f "$lc_clean_dir/$corpusbasename.lowercase.$lang1" ]; then
		"$toolsdir/scripts/tokenizer/lowercase.perl" < "$cleandir/$corpusbasename.clean.$lang1" > "$lc_clean_dir/$corpusbasename.lowercase.$lang1"
	else
		echo "The $lc_clean_dir/$corpusbasename.lowercase.$lang1 file already exists. Reusing it."
	fi
	echo "$lc_clean_dir/$corpusbasename.lowercase.$lang1" >> "$report_dir/corpus-files.txt"
	if [ "$reuse" != "1" -o ! -f "$lc_clean_dir/$corpusbasename.lowercase.$lang2" ]; then
		"$toolsdir/scripts/tokenizer/lowercase.perl" < "$cleandir/$corpusbasename.clean.$lang2" > "$lc_clean_dir/$corpusbasename.lowercase.$lang2"
	else
		echo "The $lc_clean_dir/$corpusbasename.lowercase.$lang2 file already exists. Reusing it."
	fi
	echo "$lc_clean_dir/$corpusbasename.lowercase.$lang2" >> "$report_dir/corpus-files.txt"
	#----------------------------------------------------------------------------------------------------------------------------------------
	#create data to be used in moses.ini
	if [ "$lngmdl" = "1" ]; then
		lmstr="0:$Gram:$lmdir/$lang2.$lngmdlparameters.blm.mm:1"
	elif [ "$lngmdl" = "5" ]; then
		lmstr="0:$Gram:$lmdir/$lang2.$lngmdlparameters.BloomMap:5"
	fi
	#------------------------------------------------------------------------------------------------------------------------
	echo "****** phase 1 of training"
	cd "$toolsdir/scripts/training"
	if [ "$lngmdl" != "1" ]; then
    "$toolsdir/scripts/training/train-model.perl" -f $lang1 -e $lang2 -last-step 1 -external-bin-dir "$toolsdir/mgizapp/bin" -corpus "$lc_clean_dir/$corpusbasename.lowercase" -alignment $alignment -max-phrase-length $MaxPhraseLength -reordering $reordering -corpus-dir "$modeldir"  -sort-buffer-size 4G -sort-batch-size 1024 -sort-compress gzip -dont-zip -sort-parallel $cores -cores $cores -parallel
	else
    "$toolsdir/scripts/training/train-model.perl" -f $lang1 -e $lang2 -last-step 1 -external-bin-dir "$toolsdir/mgizapp/bin" -corpus "$lc_clean_dir/$corpusbasename.lowercase" -alignment $alignment -max-phrase-length $MaxPhraseLength -reordering $reordering -corpus-dir "$modeldir" -sort-buffer-size 4G -sort-batch-size 1024 -sort-compress gzip -dont-zip -sort-parallel $cores -parallel
	fi
	#------------------------------------------------------------------------------------------------------------------------
	echo "****** phase 2 of training: MGIZA alignment"
	"$toolsdir/mgizapp/bin/snt2cooc" "$modeldir/$lang2-$lang1.cooc" "$modeldir/$lang2.vcb" "$modeldir/$lang1.vcb" "$modeldir/$lang1-$lang2-int-train.snt"  
	"$toolsdir/mgizapp/bin/snt2cooc" "$modeldir/$lang1-$lang2.cooc" "$modeldir/$lang1.vcb" "$modeldir/$lang2.vcb" "$modeldir/$lang2-$lang1-int-train.snt"
	"$toolsdir/mgizapp/bin/mgiza" -ncpus $cores -c "$modeldir/$lang2-$lang1-int-train.snt" -o "$modeldir/$lang2-$lang1" -s "$modeldir/$lang1.vcb" -t "$modeldir/$lang2.vcb" -coocurrencefile "$modeldir/$lang1-$lang2.cooc" -ml $ml -countincreasecutoff $countincreasecutoff -countincreasecutoffal $countincreasecutoffal -mincountincrease $mincountincrease -peggedcutoff $peggedcutoff -probcutoff $probcutoff -probsmooth $probsmooth -m1 $model1iterations -m2 $model2iterations -mh $hmmiterations -m3 $model3iterations -m4 $model4iterations -m5 $model5iterations -m6 $model6iterations -t1 $model1dumpfrequency -t2 $model2dumpfrequency -t2to3 $transferdumpfrequency -t345 $model345dumpfrequency -th $hmmdumpfrequency -onlyaldumps $onlyaldumps -nodumps $nodumps -compactadtable $compactadtable -model4smoothfactor $model4smoothfactor -compactalignmentformat $compactalignmentformat -verbose $verbose -verbosesentence $verbosesentence -emalsmooth $emalsmooth -model23smoothfactor $model23smoothfactor -model4smoothfactor $model4smoothfactor -model5smoothfactor $model5smoothfactor -nsmooth $nsmooth -nsmoothgeneral $nsmoothgeneral -deficientdistortionforemptyword $deficientdistortionforemptyword -depm4 $depm4 -depm5 $depm5 -emalignmentdependencies $emalignmentdependencies -emprobforempty $emprobforempty -m5p0 $m5p0 -manlexfactor1 $manlexfactor1 -manlexfactor2 $manlexfactor2 -manlexmaxmultiplicity $manlexmaxmultiplicity -maxfertility $maxfertility -p0 $p0 -pegging $pegging
	"$toolsdir/mgizapp/bin/mgiza" -ncpus $cores -c "$modeldir/$lang1-$lang2-int-train.snt" -o "$modeldir/$lang1-$lang2" -s "$modeldir/$lang2.vcb" -t "$modeldir/$lang1.vcb" -coocurrencefile "$modeldir/$lang2-$lang1.cooc" -ml $ml -countincreasecutoff $countincreasecutoff -countincreasecutoffal $countincreasecutoffal -mincountincrease $mincountincrease -peggedcutoff $peggedcutoff -probcutoff $probcutoff -probsmooth $probsmooth -m1 $model1iterations -m2 $model2iterations -mh $hmmiterations -m3 $model3iterations -m4 $model4iterations -m5 $model5iterations -m6 $model6iterations -t1 $model1dumpfrequency -t2 $model2dumpfrequency -t2to3 $transferdumpfrequency -t345 $model345dumpfrequency -th $hmmdumpfrequency -onlyaldumps $onlyaldumps -nodumps $nodumps -compactadtable $compactadtable -model4smoothfactor $model4smoothfactor -compactalignmentformat $compactalignmentformat -verbose $verbose -verbosesentence $verbosesentence -emalsmooth $emalsmooth -model23smoothfactor $model23smoothfactor -model4smoothfactor $model4smoothfactor -model5smoothfactor $model5smoothfactor -nsmooth $nsmooth -nsmoothgeneral $nsmoothgeneral -deficientdistortionforemptyword $deficientdistortionforemptyword -depm4 $depm4 -depm5 $depm5 -emalignmentdependencies $emalignmentdependencies -emprobforempty $emprobforempty -m5p0 $m5p0 -manlexfactor1 $manlexfactor1 -manlexfactor2 $manlexfactor2 -manlexmaxmultiplicity $manlexmaxmultiplicity -maxfertility $maxfertility -p0 $p0 -pegging $pegging
	echo "****** phase 2.1 of training (merge alignments)"
	"$toolsdir/mgizapp/scripts/merge_alignment.py" "$modeldir/$lang1-$lang2.A3.final".part* > "$modeldir/$lang1-$lang2.A3.final"
	"$toolsdir/mgizapp/scripts/merge_alignment.py" "$modeldir/$lang2-$lang1.A3.final".part* > "$modeldir/$lang2-$lang1.A3.final"
	gzip -f "$modeldir/$lang1-$lang2.A3.final" > "$modeldir/$lang1-$lang2.A3.final.gz"
	gzip -f "$modeldir/$lang2-$lang1.A3.final" > "$modeldir/$lang2-$lang1.A3.final.gz"
	if [ -f "$modeldir/$lang1-$lang2.A3.final" ]; then
		rm -f "$modeldir/$lang1-$lang2.A3.final"
	fi
	if [ -f "$modeldir/$lang2-$lang1.A3.final" ]; then
		rm -f "$modeldir/$lang2-$lang1.A3.final"
	fi
	rm -f "$modeldir/$lang1-$lang2.A3".final.part* 2>/dev/null
	rm -f "$modeldir/$lang2-$lang1.A3".final.part* 2>/dev/null
	#-------------------------------------------------------------------------------------------------------------------------------
	if [ "$paralleltraining" = "1" ]; then
		echo "****** Rest of parallel training"
		"$toolsdir/scripts/training/train-model.perl" -parallel -external-bin-dir "$toolsdir/mgizapp/bin" -root-dir "$workdir" -corpus "$lc_clean_dir/$corpusbasename.lowercase" -f $lang1 -e $lang2 -alignment $alignment -reordering $reordering -lm $lmstr -phrase-translation-table "$modeldir/phrase-table.$corpusbasename.$lang1-$lang2" -reordering-table "$modeldir/reordering-table.$corpusbasename.$lang1-$lang2" -max-phrase-length $MaxPhraseLength -first-step 3 -last-step $lasttrainingstep -model-dir "$modeldir" -corpus-dir "$modeldir" -giza-f2e "$modeldir" -giza-e2f "$modeldir" -baseline-corpus $corpusbasename
	else
		echo "****** Rest of non-parallel training"
		"$toolsdir/scripts/training/train-model.perl" -external-bin-dir "$toolsdir/mgizapp/bin" -root-dir "$workdir" -corpus "$lc_clean_dir/$corpusbasename.lowercase" -f $lang1 -e $lang2 -alignment $alignment -reordering $reordering -lm $lmstr -phrase-translation-table "$modeldir/phrase-table.$corpusbasename.$lang1-$lang2" -reordering-table "$modeldir/reordering-table.$corpusbasename.$lang1-$lang2" -max-phrase-length $MaxPhraseLength -first-step 3 -last-step $lasttrainingstep -model-dir "$modeldir" -corpus-dir "$modeldir" -giza-f2e "$modeldir" -giza-e2f "$modeldir" -baseline-corpus $corpusbasename
	fi
	#-------------------------------------------------------------------------------------------------------------------------------
	if [ "$memmapping" = "1" ]; then
		cp "$modeldir/moses.ini" "$memmapsdir"
		echo "$memmapsdir/moses.ini" >> "$report_dir/corpus-files.txt"
	fi
	cp "$modeldir/moses.ini" "$modeldir/moses.ini.bak.train"
else
	echo "Training already done. Reusing it."
fi

for createdfile in `ls "$modeldir"`; do
	echo "$modeldir/$createdfile" >> "$report_dir/corpus-files.txt"
done

if [ ! -f "$modeldir/moses.ini" ]; then
	makeTrainingReport
	echo "Corpus not correctly trained. Exiting..."
	exit 1
else
  mosesini="$modeldir/moses.ini"
fi

cd "$workdir"
}


Do_Mem_Mapping(){
#=========================================================================================================================================================
#5. CORPUS MEMORY-MAPPING
#=========================================================================================================================================================
if (( $memmapping == 1 )) ; then
	echo "********************** MEMORY-MAPPING:"
	#If you have no trained corpus, then alert that you should create it
	checktrainedcorpusexists

	startmmpdate=`date +day:%d/%m/%Y-time:%H:%M:%S`

	if [ "$reuse" != "1" -o ! -s "$memmapsdir/reordering-table.$corpusbasename.$lang1-$lang2.$param.binlexr.srctree" -o ! -s "$memmapsdir/phrase-table.$corpusbasename.$lang1-$lang2.binphr.idx" -o ! -s "$memmapsdir/moses.ini" ]; then
		if [ -f "$memmapsdir/phrase-table.$corpusbasename.$lang1-$lang2.binphr.idx" ]; then
			rm -rf "$memmapsdir"
			mkdir -p "$memmapsdir"
		fi
		#-----------------------------------------------------------------------------------------------------------------------------------------
		echo "****** create binary phrase table"
		gzip -cd "$modeldir/phrase-table.$corpusbasename.$lang1-$lang2.gz" | LC_ALL=C sort | "$toolsdir/bin/processPhraseTable" -ttable 0 0 - -nscores 5 -out "$memmapsdir/phrase-table.$corpusbasename.$lang1-$lang2"
		#-----------------------------------------------------------------------------------------------------------------------------------------
		echo "****** create binary reordering table"

		gzip -cd "$modeldir/reordering-table.$corpusbasename.$lang1-$lang2.$param.gz" | LC_ALL=C sort | "$toolsdir/bin/processLexicalTable" -out "$memmapsdir/reordering-table.$corpusbasename.$lang1-$lang2.$param"
		#-----------------------------------------------------------------------------------------------------------------------------------------
		#Save the present moses.ini just in case it is erased if you interrupt one of the subsequent steps
		cp "$modeldir/moses.ini" "$modeldir/moses.ini.bak.memmap"
		echo "$modeldir/moses.ini.bak.memmap" >> "$report_dir/corpus-files.txt"
		cp "$modeldir/moses.ini" "$memmapsdir/moses.ini"
		sed -e "s#$modeldir#$memmapsdir#g" -e "s#wbe\-$reordering\.gz#wbe-$reordering#g" -e "s#wbe\-msd\-backward\-fe\.gz#wbe-msd-backward-fe#g" -e "s#wbe\-msd\-backward\-f\.gz#wbe-msd-backward-f#g" -e "s#wbe\-monotonicity\-backward\-fe\.gz#wbe-monotonicity-backward-fe#g"  -e "s#wbe\-monotonicity\-backward\-f\.gz#wbe-monotonicity-backward-f#g" -e "s#0 0 0 5 $memmapsdir\/phrase\-table\.$corpusbasename\.$lang1\-$lang2#1 0 0 5 $memmapsdir/phrase-table.$corpusbasename.$lang1-$lang2#g" "$memmapsdir/moses.ini" > "$memmapsdir/moses.ini.memmap"
		mv "$memmapsdir/moses.ini.memmap" "$memmapsdir/moses.ini"
		mosesini="$memmapsdir/moses.ini"
		#-----------------------------------------------------------------------------------------------------------------------------------------
	else
		echo "Memory-mapping already done. Reusing it."
	fi

	for createdfile in `ls "$memmapsdir"`; do
		echo "$memmapsdir/$createdfile" >> "$report_dir/corpus-files.txt"
	done

	if [ ! -f "$memmapsdir/reordering-table.$corpusbasename.$lang1-$lang2.$param.binlexr.srctree" ]; then
		makeTrainingReport
		echo "Memory-mapping not correctly done. Exiting..."
		exit 1
	fi
fi
cd "$workdir"
}

Do_Tuning(){
#=========================================================================================================================================================
#6. TUNING
#=========================================================================================================================================================
if [ "$tuning" = "apply-previous-weights" ]; then
  starttuningdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
  echo "********************** APPLY PREVIOUS WEIGHTS:"
  "$toolsdir/scripts/ems/support/reuse-weights.perl" "$datadir/$previous_weight_file" < "$mosesini" > "$tuningdir/moses.tuning.ini"

elif [ "$tuning" = "tuning" ]; then
	echo "********************** TUNING:"
	#If you have no trained corpus, then alert that you should create it
	checktrainedcorpusexists

	starttuningdate=`date +day:%d/%m/%Y-time:%H:%M:%S`

	if [ -f "$tuningdir/run1.moses.ini" ]; then
		rm -rf "$tuningdir"
		mkdir -p "$tuningdir"
		dotrainingtest=1
	fi
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** tokenize language 1 tuning data"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$tuningbasename.tok.$lang1" ]; then
		if [ -f "$datadir/$tuningbasename.$lang1" ]; then
			tr '\a\b\f\r\v|' '     /' < "$datadir/$tuningbasename.$lang1" > "$datadir/$tuningbasename.$lang1.tmp"
			"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l  $lang1 < "$datadir/$tuningbasename.$lang1.tmp" > "$tokdir/$tuningbasename.tok.$lang1"
		else
			echo "The $datadir/$tuningbasename.$lang1 file, used for tuning, does not exist. Please review the tuningbasename setting of this script. Exiting ..."
			exit 1
		fi		
	else
		echo "The $tokdir/$tuningbasename.tok.$lang1 file already exists. Reusing it."
	fi
	echo "$tokdir/$tuningbasename.tok.$lang1" >> "$report_dir/corpus-files.txt"
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** tokenize language 2 tuning data"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$tuningbasename.tok.$lang2" ]; then
		if [ -f "$datadir/$tuningbasename.$lang2" ]; then
			tr '\a\b\f\r\v|' '     /' < "$datadir/$tuningbasename.$lang2" > "$datadir/$tuningbasename.$lang2.tmp"
			"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l  $lang2 < "$datadir/$tuningbasename.$lang2.tmp" > "$tokdir/$tuningbasename.tok.$lang2"
		else
			echo "The $datadir/$tuningbasename.$lang2 file, used for tuning, does not exist. Please review the tuningbasename setting of this script. Exiting ..."
			exit 1
		fi		
	else
		echo "The $tokdir/$tuningbasename.tok.$lang2 file already exists. Reusing it."
	fi
	echo "$tokdir/$tuningbasename.tok.$lang2" >> "$report_dir/corpus-files.txt"
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** lowercase language 1 tuning data"
	if [ "$reuse" != "1" -o ! -f "$lc_no_clean_dir/$tuningbasename.lowercase.$lang1" ]; then
		"$toolsdir/scripts/tokenizer/lowercase.perl" < "$tokdir/$tuningbasename.tok.$lang1" > "$lc_no_clean_dir/$tuningbasename.lowercase.$lang1"
	else
		echo "The $lc_no_clean_dir/$tuningbasename.lowercase.$lang1 file already exists. Reusing it."
	fi
	echo "$lc_no_clean_dir/$tuningbasename.lowercase.$lang1" >> "$report_dir/corpus-files.txt"
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** lowercase language 2 tuning data"
	if [ "$reuse" != "1" -o ! -f "$lc_no_clean_dir/$tuningbasename.lowercase.$lang2" ]; then
		"$toolsdir/scripts/tokenizer/lowercase.perl" < "$tokdir/$tuningbasename.tok.$lang2" > "$lc_no_clean_dir/$tuningbasename.lowercase.$lang2"
	else
		echo "The $lc_no_clean_dir/$tuningbasename.lowercase.$lang2 file already exists. Reusing it."
	fi
	echo "$lc_no_clean_dir/$tuningbasename.lowercase.$lang2" >> "$report_dir/corpus-files.txt"
	#-----------------------------------------------------------------------------------------------------------------------------------------

	echo "****** tuning!!!"
	cd "$workdir/tuning"
	mosesinitun="$modeldir/moses.ini"
  mira_options=
  pro_options=

  if [ "$tuning_type" = "kbmira" ]; then
    mira_options=--batch-mira
  elif [ "$tuning_type" = "pro" ]; then
    pro_options=--pairwise-ranked
  fi

  if [ "$memmapping" = "1" ]; then
    cpt="--no-filter-phrase-table"
		mosesini="$memmapsdir/moses.ini"
  fi

  if [ "$tuning_type" = "kbmira" -o "$tuning_type" = "mert" -o "$tuning_type" = "pro" ]; then
    if [ "$lngmdl" != "1" ]; then
	    "$toolsdir/scripts/training/mert-moses.pl" "$lc_no_clean_dir/$tuningbasename.lowercase.$lang1" "$lc_no_clean_dir/$tuningbasename.lowercase.$lang2" "$toolsdir/bin/moses" "$mosesini" --mertdir "$toolsdir/bin" --rootdir "$toolsdir/scripts" --working-dir "$tuningdir" --maximum-iterations $maxruns $cpt $mira_options $pro_options --decoder-flags "-threads $cores -v 0"
    else
	    "$toolsdir/scripts/training/mert-moses.pl" "$lc_no_clean_dir/$tuningbasename.lowercase.$lang1" "$lc_no_clean_dir/$tuningbasename.lowercase.$lang2" "$toolsdir/bin/moses" "$mosesini" --mertdir "$toolsdir/bin" --rootdir "$toolsdir/scripts" --working-dir "$tuningdir" --maximum-iterations $maxruns $cpt $mira_options $pro_options --decoder-flags "-v 0"
    fi
  fi

	cp "$tuningdir/moses.ini" "$tuningdir/moses.tuning.ini"
fi

for createdfile in `ls "$tuningdir"`; do
	echo "$tuningdir/$createdfile" >> "$report_dir/corpus-files.txt"
done

if [ ! -f "$tuningdir/moses.tuning.ini" ]; then
	makeTrainingReport
	echo "Tuning not correctly done. Exiting..."
	exit 1
else
  mosesini="$tuningdir/moses.tuning.ini"
fi
}

Do_Training_Test(){
#=========================================================================================================================================================
#7. TRAINING TEST
#=========================================================================================================================================================
if (( $runtrainingtest == 1 )) ; then

	echo "********************** RUN TRAINING TEST:"
	#If you have no trained corpus, then alert that you should create it
	checktrainedcorpusexists

	starttestdate=`date +day:%d/%m/%Y-time:%H:%M:%S`

	if [ -f "$testdir/$testbasename.moses.detok.$lang2" ]; then
		rm -rf "$testdir"
		mkdir -p "$testdir"
	fi
	cp "$datadir/$testbasename.$lang1" "$testdir/$testbasename.$lang1"
	cp "$datadir/$testbasename.$lang2" "$testdir/$testbasename.$lang2"
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** tokenize language 1 training test data"
	if [ "$reuse" != "1" -o ! -f "$tokdir/$testbasename.tok.$lang1" ]; then
		if [ -f "$testdir/$testbasename.$lang1" ]; then
			fromdos "$testdir/$testbasename.$lang1"
			tr '\a\b\f\r\v|' '     /' < "$testdir/$testbasename.$lang1" > "$testdir/$testbasename.$lang1.tmp"
			"$toolsdir/scripts/tokenizer/tokenizer.perl" -threads $cores -a -l  $lang1 < "$testdir/$testbasename.$lang1.tmp" > "$tokdir/$testbasename.tok.$lang1"
		else
			echo "The $testdir/$testbasename.$lang1 file, used for testing the trained corpus, does not exist. Please review the \$testbasename and possibly the \$lang1 settings of this script. Exiting ..."
			exit 1
		fi
	else
		echo "The $tokdir/$testbasename.tok.$lang1 file already exists. Reusing it."
	fi
	echo "$tokdir/$testbasename.tok.$lang1" >> "$report_dir/corpus-files.txt"
	cp "$testdir/$testbasename.$lang2" "$tokdir/$testbasename.tok.$lang2"
	#-----------------------------------------------------------------------------------------------------------------------------------------
	echo "****** lowercase training test data"
	if [ "$reuse" != "1" -o ! -f "$lc_no_clean_dir/$testbasename.lowercase.$lang1" ]; then
		"$toolsdir/scripts/tokenizer/lowercase.perl" < "$tokdir/$testbasename.tok.$lang1" > "$lc_no_clean_dir/$testbasename.lowercase.$lang1"
	else
		echo "The $lc_no_clean_dir/$testbasename.lowercase.$lang1 file already exists. Reusing it."
	fi
	echo "$lc_no_clean_dir/$testbasename.lowercase.$lang1" >> "$report_dir/corpus-files.txt"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  if [ ! "$lngmdl" = "1" ]; then
      options+=" -th $cores"
  fi
  if [ "$tuning" = "no-tuning" ]; then
	  options+=" -weight-l $weight_l -weight-d $weight_d -weight-w $weight_w"
  fi
	echo "****** show weights used in training"
  "$toolsdir/bin/moses" -f "$mosesini" -show-weights
  echo "****** run decoder test"
  "$toolsdir/bin/moses" -f "$mosesini" -mbr $mbr -mbr-size $mbrsize -mbr-scale $mbrscale -monotone-at-punctuation $monotoneatpunctuation -ttable-limit $ttablelimit -b $beamthreshold -early-discarding-threshold $earlydiscardingthreshold -search-algorithm $searchalgorithm -cube-pruning-pop-limit $cubepruningpoplimit -s $stack -max-phrase-length $maxphraselen -cube-pruning-diversity $cubepruningdiversity -distortion-limit $distortionlimit -v 0 $options < "$lc_no_clean_dir/$testbasename.lowercase.$lang1"  > "$testdir/$testbasename.moses.$lang2"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  echo "****** recase the output"
	  "$toolsdir/scripts/recaser/recase.perl" -model "$recaserdir/moses.ini" -in "$testdir/$testbasename.moses.$lang2" -moses "$toolsdir/bin/moses" > "$testdir/$testbasename.moses.recased.$lang2"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  echo "****** detokenize the output"
  "$toolsdir/scripts/tokenizer/detokenizer.perl" -threads $cores -a -l $lang2 < "$testdir/$testbasename.moses.recased.$lang2" > "$testdir/$testbasename.moses.detok.$lang2"
	rm "$testdir/$testbasename.moses.detok.$lang2e" 2>/dev/null
  echo "$testdir/$testbasename.moses.detok.$lang2" >> "$report_dir/corpus-files.txt"
  sed -i'' -e's# / #/#g; s/\\ $/\\/g' "$testdir/$testbasename.moses.detok.$lang2"
	sed -i'' -e's#\& #\&amp\; #g; s#<#\&lt\;#g' "$testdir/$testbasename.$lang1"
	sed -i'' -e's#\& #\&amp\; #g; s#<#\&lt\;#g' "$testdir/$testbasename.$lang2"
	sed -i'' -e's#\& #\&amp\; #g; s#<#\&lt\;#g' "$testdir/$testbasename.moses.detok.$lang2"
#-----------------------------------------------------------------------------------------------------------------------------------------
  echo "****** wrap test result in SGM"
  echo "*** wrap source file"
	sed -i'' -e's/\*/@AST@/g' "$testdir/$testbasename.$lang1"
	exec 6<&0
  exec<"$testdir/$testbasename.$lang1"
  echo '<srcset setid="'$testbasename'" srclang="'$lang1'">' > "$testdir/$testbasename-src.$lang1.sgm"
  echo '<DOC docid="'$testbasename'">' >> "$testdir/$testbasename-src.$lang1.sgm"
  numseg=0
  while read line
     do
		  numseg=$(($numseg+1))
     		echo "<seg id=$numseg>"$line"</seg>" >> "$testdir/$testbasename-src.$lang1.sgm"
     done
  echo "</DOC>" >> "$testdir/$testbasename-src.$lang1.sgm"
  echo "</srcset>" >> "$testdir/$testbasename-src.$lang1.sgm"
	exec 0<&6 6<&-
	sed -i'' -e's/@AST@/\*/g' "$testdir/$testbasename-src.$lang1.sgm"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  echo "*** wrap reference (human-made) translation"
  sed -i'' -e's/\*/@AST@/g' "$testdir/$testbasename.$lang2"
	exec 6<&0
  exec<"$testdir/$testbasename.$lang2"
  echo '<refset setid="'$testbasename'" srclang="'$lang1'" trglang="'$lang2'">' > "$testdir/$testbasename-ref.$lang2.sgm"
  echo '<DOC docid="'$testbasename'" sysid="ref">' >> "$testdir/$testbasename-ref.$lang2.sgm"
  numseg=0
  while read line
     do
		  numseg=$(($numseg+1))
	     	echo "<seg id=$numseg>"$line"</seg>" >> "$testdir/$testbasename-ref.$lang2.sgm"
     done
  echo "</DOC>" >> "$testdir/$testbasename-ref.$lang2.sgm"
  echo "</refset>" >> "$testdir/$testbasename-ref.$lang2.sgm"
	exec 0<&6 6<&-
	sed -i'' -e's/@AST@/\*/g' "$testdir/$testbasename-ref.$lang2.sgm"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  echo "*** wrap Moses translation"
	sed -i'' -e's/\*/@AST@/g' "$testdir/$testbasename.moses.detok.$lang2"
	exec 6<&0
  exec<"$testdir/$testbasename.moses.detok.$lang2"
  echo '<tstset setid="'$testbasename'" srclang="'$lang1'" trglang="'$lang2'">' > "$testdir/$testbasename.moses.sgm"
  echo '<DOC docid="'$testbasename'" sysid="moses">' >> "$testdir/$testbasename.moses.sgm"
  numseg=0
  while read line
     do
		  numseg=$(($numseg+1))
	     	echo "<seg id=$numseg>"$line"</seg>" >> "$testdir/$testbasename.moses.sgm"
     done
  echo "</DOC>" >> "$testdir/$testbasename.moses.sgm"
  echo "</tstset>" >> "$testdir/$testbasename.moses.sgm"
	exec 0<&6 6<&-
	sed -i'' -e's/@AST@/\*/g' "$testdir/$testbasename.moses.sgm"
  #-----------------------------------------------------------------------------------------------------------------------------------------
  sed -i'' -e's/\x1E/\-/g' "$testdir/$testbasename-src.$lang1.sgm"
  sed -i'' -e's/\x1E/\-/g' "$testdir/$testbasename-ref.$lang2.sgm"
  sed -i'' -e's/\x1E/\-/g' "$testdir/$testbasename.moses.sgm"
	sed -i'' -e's#\&amp\; #\& #g; s#\&lt\;#<#g' "$testdir/$testbasename.$lang1"
	sed -i'' -e's#\&amp\; #\& #g; s#\&lt\;#<#g' "$testdir/$testbasename.$lang2"
	sed -i'' -e's#\&amp\; #\& #g; s#\&lt\;#<#g' "$testdir/$testbasename.moses.detok.$lang2"
  #-----------------------------------------------------------------------------------------------------------------------------------------

	for createdfile in `ls "$testdir"`; do
		echo "$testdir/$createdfile" >> "$report_dir/corpus-files.txt"
	done

	if [ ! -f "$testdir/$testbasename.moses.sgm" ]; then
		makeTrainingReport
		echo "Corpus training test not correctly done. Exiting..."
		exit 1
	fi

	echo "***************** GET SCORE:"
	#check if a trained corpus exists and react appropriately
	checktrainedcorpusexists

	#If a training test was not done before, alert for that and exit
	if [ ! -f "$testdir/$testbasename.moses.sgm" ]; then
		echo "In order to get a training test score, you must have done a training test first. Please set the \$runtrainingtest variable of this script to 1 in order to run a training test. Exiting..."
		exit 1
	else
		#-----------------------------------------------------------------------------------------------------------------------------------------
		echo "****** scoring"
		startscoringdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
		score=`"$toolsdir/scorers/mteval-v11b.pl" -s "$testdir/$testbasename-src.$lang1.sgm" -r "$testdir/$testbasename-ref.$lang2.sgm" -t "$testdir/$testbasename.moses.sgm" -c`
		echo $score
		#-----------------------------------------------------------------------------------------------------------------------------------------
	fi
fi
}


{
  # Get start date and time of corpus training 
  startdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
  d1=`date +%s`

	Do_Language_Model
  Do_Recaser_Training
  Do_Corpus_Training
  if [ "$memmapping"="1" ]; then
    Do_Mem_Mapping
  fi
  if [ "$tuning" != "no-tuning" ]; then
    Do_Tuning
  fi
  if [ "$runtrainingtest"="1" ]; then
    Do_Training_Test
  fi
  makeTrainingReport
  enddate=`date +day:%d/%m/%Y-time:%H:%M:%S`
  d2=`date +%s`
  ((diff_sec=$d2-$d1))
  ((days=$diff_sec/86400))
  ((hours=($diff_sec%86400)/3600))
  ((minutes=($diff_sec%86400)%3600/60))
  ((seconds=$diff_sec-days*86400-hours*3600-minutes*60))

  echo "********************************************************************************************"
  echo "!!! Corpus training finished."
  enddate=`date +day:%d/%m/%Y-time:%H:%M:%S`
  echo ""
  echo "Start: $startdate"
  echo "End:   $enddate"
  echo ""
  echo "The training lasted for approximately $days days, $hours hours, $minutes minutes and $seconds seconds."
  echo ""
  echo "A summary of it is located in $report_dir/$report !!!"
  echo ""
  echo "A log of this training has been created in $log_dir/$logname.log."
  echo ""

  exit 0
} 2>&1 | tee "$log_dir/$logname.log"


#=================================================================================================================================================
# Changes in version 1.22
#=================================================================================================================================================
# Uses Moses decoder 1.0
# Can use pro or kbmira for tuning
# Better log and report management
#=================================================================================================================================================
# Changes in version 1.13
#=================================================================================================================================================
# Uses new Moses decoder (published on August 13, 2010 and updated on August 14, 2010)
# Protects users better from mistakes (namely from a deficiently trained inverse corpus and from the deletion of a training in a previously trained corpus)
# Reuses previous work better
# Stops with an informative message if the products of one training phase (LM building, recaser training, corpus training, memmory-mapping, tuning or training test)
# do not produce the expected results
# Much more informative and accurate training log file that now reflects the work actually done, even if it is interrupted by CTRL+C; continues to show
# the settings chosen by the user too
#=================================================================================================================================================
# Changes in version 1.01
#=================================================================================================================================================
# Uses new Moses decoder (published on August 9, 2010)
# Works in Ubuntu 10.04 LTS (and, if you adapt the package dependencies, with Ubuntu 9.10 and 9.04
# Appends to the end of the name of the translated files ".$lang2.moses"
# Does not translate files already translated
# Indicates to user what to do if the $logfile parameter wasn't set
# Special treatment of files translated for being used in TMX translation memories
#=================================================================================================================================================
#Changes in version 0.992
#=================================================================================================================================================
# Scripts adapted to both Ubuntu 10.04 and to the new Moses (version published on April 26, 2010)
#=================================================================================================================================================
#Changes in version 0.99
#=================================================================================================================================================
# ***training steps*** chosen by the user cannot be illogical (for instance, it is not possible to tune or to evaluate a corpus not yet trained); user can still enter illegal parameters values, though)
# does not overwrite files previously created in trainings with different settings
# does not redo work previously done with the same settings, or parts of work that share the same settings 
# can reuse phases 1 and 2 of training previously made with a lang2-lang1 corpus when a new lang1-lang2 (inverted corpus) corpus is being trained
# can limit tuning duration
# parallel training works  (in 64 bits Ubuntu 9.04 version)
# no segmentation fault with RandLM (in 64 bits Ubuntu 9.04 version)
# can compile-lm --memmap IRSTLM (in 64 bits Ubuntu 9.04 version)
# creates a log of all the files created
# work directory renamed corpora_trained directory

