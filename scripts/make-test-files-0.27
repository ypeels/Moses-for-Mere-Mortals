#!/usr/bin/env bash
# licenced under the GPL licence, version 3

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
# make-test-files-0.27
# date: 15/09/2014
#
# Copyright 2009, 2014 João L. A. C. Rosas
#
# Special thanks to Hilário Leal Fontes and Maria José Machado,
# who helped to test the script and made very helpful suggestions
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#


# PURPOSE: 
#=========
# Given 2 strictly aligned files, one in the source language and another in the target language, this script creates a backup of them and cuts each of them into 3 parts: one that will be used for training, another for testing the training and still another for tuning. The initial files are divided into X sectors (defined by the user in the settings of this script) and the script extracts Y pseudorandom segments from each sector (the value Y is also defined by the user). This script can be used to create training test files that attempt to cover the whole universe of the sampling space and which simultaneously sample pseudorandomly each of those sectors Y times in an attempt to get a test file that is more representative of that universe than a list of X*Y consecutive segments would be. The files used for training will have those segments erased. The initial corpus will be preserved (the files that will be used for corpus training are new files created by this script).

#  PRE-REQUIREMENTS:
#===================
# 1) A Moses installation must have been made with the create-* script;

#####################################################################################
# The values of the variables that follow should be filled according to your needs:
#####################################################################################
#Source language abbreviation
lang1=pt
#Target language abbreviation
lang2=en
#Corpus from which you want to create the training, tuning and test files
corpusbasename=200000
#The corpus is divided into x sectors and then each sector is randomly sampled to get y segments per sector
#Total number of sectors used in each language to create the tuning files 
tuning_totalnumsectors=100
#Total number of segments per sector used in each language to create the tuning files 
tuning_numsegs=10
#Total number of sectors used in each language to create the training test files 
test_totalnumsectors=100
#Total number of segments per sector used in each language to create the training test files 
test_numsegs=10
####################################################################################
# DON'T CHANGE THE LINES THAT FOLLOW ... unless you know what you are doing!
####################################################################################

startdate=`date +day:%d/%m/%y-time:%H:%M:%S`

#Function to get a random positive number with up to 10 digits between highest ($1) and lowest ($2)
randompos(){
	num=$(( ( ($RANDOM & 3)<<30 | $RANDOM<<15 | $RANDOM ) - 0x80000000 ))
	if [ $num -lt 0 ] ; then
		# $1 = highest; $2 = lowest
		newnum=$[ `expr 0 - $num` % ( $[ $1 - $2 ] + 1 )  + $2 ]
	else
		newnum=$[ $num % ( $[ $1 - $2 ] + 1 )  + $2 ]
	fi
	echo $newnum
}

exchange()
{
  local temp=${numsegarray[$1]} 
  numsegarray[$1]=${numsegarray[$2]}
  numsegarray[$2]=$temp
  return
}  

#This function was published in jeronimo's blog (http://www.roth.lu/serendipity/index.php?/archives/31-Bash-Arrays-and-search-function.html)
# Function to find out whether something exists in a bash array or not
bash__is_in_array () {
haystack=( "$@" )
haystack_size=( "${#haystack[@]}" )
needle=${haystack[$((${haystack_size}-1))]}
for ((i=0;i<$(($haystack_size-1));i++)); do
h=${haystack[${i}]};
[ $h = $needle ] && return 42
done
}

echo "******* Initialize"
source mt-location
#Directory where the source and target language files used for creating the training, tuning and test files are located
original_files_dir="$mosesdir/corpora_for_training"
#Directory where the source and target language files created for training, tuning and test files are located
training_files_dir="$mosesdir/corpora_for_training"

echo "******* Removing homonymous files previously created, if any"
rm -f "$training_files_dir/$corpusbasename.for_train.$lang1" 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.for_train.$lang2" 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.for_test.$lang1* 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.for_test.$lang2* 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.for_tuning.$lang1" 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.for_tuning.$lang2" 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.clean.$lang1" 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.clean.$lang2" 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.$lang1.ctrl* 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.$lang2.ctrl* 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.ctrl.$lang1* 2>/dev/null
rm -f "$training_files_dir"/$corpusbasename.ctrl.$lang2* 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.tok.$lang1" 2>/dev/null
rm -f "$training_files_dir/$corpusbasename.tok.$lang2" 2>/dev/null

rm -f "$training_files_dir"/$lmbasename.ctrl.$lang1* 2>/dev/null
rm -f "$training_files_dir"/$lmbasename.ctrl.$lang2* 2>/dev/null
rm -f "$training_files_dir/$lmbasename.tok.$lang1" 2>/dev/null
rm -f "$training_files_dir/$lmbasename.tok.$lang2" 2>/dev/null
rm -f "$training_files_dir"/*boundaries 2>/dev/null

echo "******* Check that necessary files are available"
if [ ! -s "$original_files_dir/$corpusbasename.$lang1" ]; then
	echo -e "The $original_files_dir/$corpusbasename.$lang1 file doesn't exist.\n\nTherefore, it is impossible to create the files needed for corpus training.\n\nPlease check the \$corpusbasename (it should be, if this file existed, $corpusbasename) parameter, as well as the \$lang1 and \$lang2 parameters, in $MMMdir/scripts/config-train. Exiting ..."
	exit 1
fi

if [ ! -s "$original_files_dir/$corpusbasename.$lang2" ]; then
	echo -e "The $original_files_dir/$corpusbasename.$lang2 file doesn't exist.\n\nTherefore, it is impossible to create the files needed for corpus training.\n\nlease check the \$corpusbasename (it should be, if this file existed, $corpusbasename) parameter, as well as the \$lang1 and \$lang2 parameters, in $MMMdir/scripts/config-train. Exiting ..."
	exit 1
fi

#Eliminate some control characters that can cause Moses training errors
tr '\a\b\f\r\v|' '     /' < "$original_files_dir/$corpusbasename.$lang1" > "$training_files_dir/$corpusbasename.for_train.$lang1" &
tr '\a\b\f\r\v|' '     /' < "$original_files_dir/$corpusbasename.$lang2" > "$training_files_dir/$corpusbasename.for_train.$lang2" &
wait

#Determine the number of lines of each file and check that they are equal
numlines_s=`wc -l "$original_files_dir/$corpusbasename.$lang1" | awk '{print $1'}`
numlines_t=`wc -l "$original_files_dir/$corpusbasename.$lang2" | awk '{print $1'}`

if [ "$numlines_s" != "$numlines_t" ]; then
	echo "Source and target files have a different number of segments (source = $numlines_s and target = $numlines_t). If you verify manually that they do have the same number of segments, then Bash is interpreting at least one of the characters of one of the files as something it isn't. If that is the case, you will have to isolate the line(s) that is (are) causing problems and to substitute the character in question by some other character. Exiting ..."
	exit 1
fi

echo "******* Splitting corpus files into files for testing and files for training"

#Calculate number of lines per sector
numlinespersector=$(echo "scale=0; $numlines_s/$test_totalnumsectors" | bc)

#Calculate total number of segments to extract
totsegstoextract=$(echo "scale=0; $test_totalnumsectors*$test_numsegs" | bc)

tmp=/tmp/make_test
mkdir -p $tmp 2>/dev/null
if [ "$tmp/" != "/" ]; then
  rm "$tmp/"*
fi

echo "************* $test_totalnumsectors sectors to extract for testing the training. This can take some time ..."

#Total number of segments extracted so far for the training test file
totsegsextracted=0

echo "******************** extract segments for testing:"
if [[ $totsegstoextract -lt $numlines_s ]]; then
	for (( sector=1; sector<=$test_totalnumsectors; sector++ )) ; do
		echo "sector $sector"
		floor=$(echo "scale=0; $numlinespersector*$sector-$numlinespersector+1" | bc)
		ceiling=$(echo "scale=0; $numlinespersector*$sector" | bc)
		sectornumsegsextracted=0
		while (( $sectornumsegsextracted < $test_numsegs )) ; do
			number=`randompos $ceiling $floor`
			bash__is_in_array "${numsegarray[@]}" $number
			if [ $? -ne 42 ]; then
				awk "NR==$number{print;exit}" "$training_files_dir/$corpusbasename.for_train.$lang1" >> "$tmp/$corpusbasename.for_test.$lang1"
				#sed "$number"q "$training_files_dir/$corpusbasename.for_train.$lang1" >> "$tmp/$corpusbasename.for_test.$lang1"
				let "sectornumsegsextracted += 1"
				let "totsegsextracted += 1"
        #echo "$totsegsextracted"
				numsegarray[$totsegsextracted]=$number
				f+=${numsegarray[$totsegsextracted]}
				f+="d;"
				awk "NR==$number{print;exit}" "$training_files_dir/$corpusbasename.for_train.$lang2" >> "$tmp/$corpusbasename.for_test.$lang2"
			fi
		done
	done
  cp -f "$tmp/$corpusbasename.for_test.$lang1" "$training_files_dir"
  cp -f "$tmp/$corpusbasename.for_test.$lang2" "$training_files_dir"

	f=`echo "$f" | sed 's#\;#\n#g' | sort -nr `
	f=`echo "$f" | sed 's#\n#;#g'`
	f=${f%;;*}
	sed -i'' "$f; 1d" "$training_files_dir/$corpusbasename.for_train.$lang1"
	sed -i'' "$f; 1d" "$training_files_dir/$corpusbasename.for_train.$lang2"
	wait
else
	echo "The files you want to sample have less lines than the number of sectors times the number of segments that you want to extract per sector. Exiting ..."
	exit 1
fi

#Calculate number of lines per sector
numlinespersector=$(echo "scale=0; $numlines_s/$tuning_totalnumsectors" | bc)
#Calculate total number of segments to extract
totsegstoextract=$(echo "scale=0; $tuning_totalnumsectors*$tuning_numsegs" | bc)
echo "************* $tuning_totalnumsectors sectors to extract for tuning. This can take some time ..."

echo "******************** extract segments for tuning:"
#Total number of segments extracted so far for the tuning file
totsegsextracted=0
unset numsegarray
if (( $totsegstoextract < $numlines_s )); then
	for (( sector=1; sector<=$tuning_totalnumsectors; sector++ )) ; do
		echo "sector $sector"
		floor=$(echo "scale=0; $numlinespersector*$sector-$numlinespersector+1" | bc)
		ceiling=$(echo "scale=0; $numlinespersector*$sector" | bc)
		sectornumsegsextracted=0
		while (( $sectornumsegsextracted < $tuning_numsegs )) ; do
			number=`randompos $ceiling $floor`
			bash__is_in_array "${numsegarray[@]}" $number
			if [[ $? -ne 42 ]]; then
				awk "NR==$number{print;exit}" "$training_files_dir/$corpusbasename.for_train.$lang1" >> "$tmp/$corpusbasename.for_tuning.$lang1"
				let "sectornumsegsextracted += 1"
				let "totsegsextracted += 1"
        #echo $totsegsextracted
				numsegarray[$totsegsextracted]=$number
				g+=${numsegarray[$totsegsextracted]}
				g+="d;"
				awk "NR==$number{print;exit}" "$training_files_dir/$corpusbasename.for_train.$lang2" >> "$tmp/$corpusbasename.for_tuning.$lang2"
			fi
		done
	done
  cp -f "$tmp/$corpusbasename.for_tuning.$lang1" "$training_files_dir"
  cp -f "$tmp/$corpusbasename.for_tuning.$lang2" "$training_files_dir"

	g=`echo "$g" | sed 's#\;#\n#g' | sort -nr `
	g=`echo "$g" | sed 's#\n#;#g'`
	g=${g%;;*}
	sed -i'' "$g; 1d" "$training_files_dir/$corpusbasename.for_train.$lang1"
	sed -i'' "$g; 1d" "$training_files_dir/$corpusbasename.for_train.$lang2"
	wait
else
	echo "The files you want to sample have less lines than the number of sectors times the number of segments that you want to extract per sector. Exiting ..."
	exit 1
fi

echo "******************** Final checks"
#Determine the number of lines of each training file and check that they are equal
numlines_s=`wc -l "$training_files_dir/$corpusbasename.for_train.$lang1" | awk '{print $1'}`
numlines_t=`wc -l "$training_files_dir/$corpusbasename.for_train.$lang2" | awk '{print $1'}`
if [[ $numlines_s -ne $numlines_t ]]; then
	echo "Source and target files created for training have a different number of segments (source = $numlines_s and target = $numlines_t). If you verify manually that they do have the same number of segments, then Bash is interpreting at least one of the characters of one of the files as something it isn't. If that is the case, you will have to isolate the line(s) that is (are) causing problems and to substitute the character in question by some other character. Exiting ..."
	exit 1
fi

#Determine the number of lines of each training test file and check that they are equal
numlines_s=`wc -l "$training_files_dir/$corpusbasename.for_test.$lang1" | awk '{print $1'}`
numlines_t=`wc -l "$training_files_dir/$corpusbasename.for_test.$lang2" | awk '{print $1'}`
if [[ $numlines_s -ne $numlines_t ]]; then
	echo "Source and target files created for testing the training have a different number of segments (source = $numlines_s and target = $numlines_t). If you verify manually that they do have the same number of segments, then Bash is interpreting at least one of the characters of one of the files as something it isn't. If that is the case, you will have to isolate the line(s) that is (are) causing problems and to substitute the character in question by some other character. Exiting ..."
	exit 1
fi

#Determine the number of lines of each tuning file and check that they are equal
numlines_s=`wc -l "$training_files_dir/$corpusbasename.for_tuning.$lang1" | awk '{print $1'}`
numlines_t=`wc -l "$training_files_dir/$corpusbasename.for_tuning.$lang2" | awk '{print $1'}`
if [[ $numlines_s -ne $numlines_t ]]; then
	echo "Source and target files created for tuning have a different number of segments (source = $numlines_s and target = $numlines_t). If you verify manually that they do have the same number of segments, then Bash is interpreting at least one of the characters of one of the files as something it isn't. If that is the case, you will have to isolate the line(s) that is (are) causing problems and to substitute the character in question by some other character. Exiting ..."
	exit 1
fi

if [ "$tmp/" != "/" ]; then
  rm -rf "$tmp/"* 2>/dev/null
fi

if [ "$training_files_dir/" != "/" ]; then
	rm "$training_files_dir"/*.tmp 2>/dev/null
fi

echo -e "Test files created in $training_files_dir/$corpusbasename.for_test.$lang1 and $training_files_dir/$corpusbasename.for_test.$lang2.\nTuning files created in $training_files_dir/$corpusbasename.for_tuning.$lang1 and $training_files_dir/$corpusbasename.for_tuning.$lang2.\nCorpus training files (where the segments selected for testing the training and for tuning were erased) created in $training_files_dir/$corpusbasename.for_train.$lang1 and $training_files_dir/$corpusbasename.for_train.$lang2"

#*************************************************************************************************
# Changes in version 0.27
#*************************************************************************************************
# Creates separate sets of files for tuning, testing and training
