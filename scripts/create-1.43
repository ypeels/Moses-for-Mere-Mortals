#!/usr/bin/env bash
# Licenced under the GPL licence, version 3
# The Moses decoder (https://github.com/moses-smt/mosesdecoder), is a tool upon which this script depends that is licenced under the GNU Library or Lesser General Public License (LGPL)

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#
# create-1.43
# Date: 15/09/2014
#
# Copyright 2009, 2014, João L. A. C. Rosas
#
# Special thanks to Hilário Leal Fontes and Maria José Machado,
# who helped to test the script and made very helpful suggestions
#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#

# PURPOSE: 
#=========
# This script creates a statistical machine translation system that is able to deal with no matter what pair of languages without having grammar knowledge of them (it was also hard to believe for us, but give it a try!). It downloads and/or gets packages from the $MMMdir/downloads directory or from the Internet, compiles and installs them (they include Moses 1.0 and packages like MGIZA, IRSTLM, RandLM, scorers and a demonstration corpus). This script allows you to configure (see below) many of the parameters that it uses.

#  PRE-REQUIREMENTS:
#===================
# 1. A Ubuntu 12.04 or 14.04 LTS 64-bit environment
# 2. The install-* script must have been run

# MAIN OUTPUTS:
#==============
# 1. In $mosesdir (see its description below):
#    a) Moses and all the other tools in $mosesdir/tools

#####################################################################################
# The values of the variables that follow should be filled according to your needs:
#####################################################################################
#Edit the file 'mt-location' to change $mosesdir and $MMMdir for all scripts.
source mt-location

#Full path of the already trained corpora (place where trainings are stocked)
corpora_trained="$mosesdir/corpora_trained"

#Number of processors of your computer that will be used by MGIZA (if you use all the processors available, the training speed will be improve considerably)
#!!! To use all the cores available in your computer, leave this parameter empty!!!
cores=

# Use local packages (that is, do not download them and use those in $MMMdir/downloads); 1 = use local packages; Any other value: don't (default: 1)
#!!! Use local packages in order to limit the risk that a Ubuntu update will create some incompatibility that will break Moses for Mere Mortals!!!
use_local_packages=1

#Name of report file of previous launch of the create script that you want to reuse/continue (omit the path)
#If you are installing Moses for Mere Mortals for the first time, leave this parameter empty (default: empty)
report=
#-------------------------------------------------------
#Tools that you want to install; 1 = install; Any other value = do not install (default: 1):

# At least one of the next 2 necessary for every type of training; irstlm needed for recaser training
install_irstlm=1
install_randlm=1
#-------------------------------------------------------
# Necessary for every type of training
install_mgiza=1
#-------------------------------------------------------
# !!! Next 2 necessary for every type of translation!!!
install_moses=1
install_scripts=1
#-------------------------------------------------------
# Necessary for scoring the test of the train-* script
install_scorers=1

#Do not check size of downloaded files (if they have been changed keeping the same name, Moses for Mere Mortals could falsely conclude that they were not correctly downloaded)
#1 = Do not check size of downloaded packages; Any other value = Check size of downloaded packages (default: 0)
dont_check_size=0
#-------------------------------------------------------
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# DO NOT CHANGE THE PARAMETERS THAT FOLLOW UNLESS YOU EXACTLY KNOW WHERE TO FIND
# MORE RECENT OR BETTER PACKAGES
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
irstlmpack=irstlm-5.70.02.tgz
irstlmurl=http://sourceforge.net/projects/irstlm/files/irstlm/irstlm-5.70/$irstlmpack
irstlmdir=irstlm-5.70.02
irstlmnewdir=irstlm

randlmpack=randlm-0.2.5-new.tar.gz
randlmurl=http://sourceforge.net/projects/randlm/files/$randlmpack
randlmdir=randlm-0.2.5
randlmnewdir=randlm-0.2.5

mgizapack=mgiza-master.tar.gz
mgizadir=mgiza-master
mgizanewdir=mgizapp

mosespack=mosesdecoder-1.0.0.tar.gz
mosesdefaultdir=moses
mosesnewdir=moses

megampack=megam_i686.opt

####################################################################################
# DON'T CHANGE THE LINES THAT FOLLOW ... unless you know what you are doing!
####################################################################################

startdate=`date +day:%d/%m/%Y-time:%H:%M:%S`
a=$0
d1=`date +%s`
logname=${a##*/}-$d1

if [ "$report." == "." ]; then
  report=create.`date +day-%Y-%m-%d.time-%H-%M-%S`.report
fi
#Determine number of CPU cores that are to be used
num_cores=`grep -c ^processor /proc/cpuinfo`
if [ "$cores." == "." ]; then
  cores=$num_cores
else
  if [[ $cores -gt $num_cores ]]; then
    cores=$num_cores
  fi
fi

# Create, if need be, the most important directories
if [ ! -d "$MMMdir" ]; then
	echo "The $MMMdir directory should already exist and is the directory where the present script is located. Please make sure that the \$MMMdir setting is a valid name of a directory that exists. Exiting ..."
	exit 1
fi

mkdir -p "$mosesdir" 2>/dev/null
if [ ! -d "$mosesdir" ]; then
	echo "The $mosesdir directory could not be created. Please make sure that you have enough disk space and that the \$mosesdir setting is a valid name and points to a location in which you have write permissions. Exiting ..."
	exit 1
fi

mkdir -p "$corpora_trained" 2>/dev/null
if [ ! -d "$corpora_trained" ]; then
	echo "The $corpora_trained directory could not be created. Please make sure that you have enough disk space and you have write permissions to write in that location ($corpora_trained). Exiting ..."
	exit 1
fi

#Logs 
log_dir="$mosesdir/logs"
mkdir -p "$log_dir" 2>/dev/null
mkdir "$log_dir/create" 2>/dev/null
mkdir "$log_dir/train" 2>/dev/null
mkdir "$log_dir/translate" 2>/dev/null
mkdir "$log_dir/scorer" 2>/dev/null
log_dir="$mosesdir/logs/create"
#Reports 
report_dir="$mosesdir/reports"
mkdir -p "$report_dir" 2>/dev/null
mkdir "$report_dir/create" 2>/dev/null
mkdir "$report_dir/train" 2>/dev/null
mkdir "$report_dir/translate" 2>/dev/null
mkdir "$report_dir/scorer" 2>/dev/null
report_dir="$mosesdir/reports/create"

# Full path of the directory where the tools (Moses, SRILM, IRSTLM, RandLM, etc.) will be placed
toolsdir="$mosesdir/tools"

#Directory where the packages needed by this script are located
package_dir="$MMMdir/downloads"
#-------------------------------------------------------------------------------------
# Set some useful functions
#-------------------------------------------------------------------------------------
Clean_if_failure(){
	# $loc_var = local variable (ex: $did_srilm); $destination_directory = directory of failed package (ex: $package_dir/$srilmdir)
	#$loc_var=$1
	#$destination_directory=$2
	if [ "$1" = "0" ]; then
		rm -rf "$2" 2>/dev/null
	fi
}

#-------------------------------------------------------------------------------------
Download_package(){
	# $package_full_loc_name = local package full name (ex: $packagedir/$srilmpack); $program_name = program name (ex: SRILM); $package_url = url used for downloading (ex: $srilmurl); $correct_size = right size of downloaded package $destination_directory = destination directory
	#$package_full_loc_name=$1
	#$program_name=$2
	#$package_url=$3
	#$correct_size=$4
	#$destination_directory=$5
	echo $1
	if [ ! -s "$1" ]; then
		echo "Download $2 package"
		cd $package_dir
		wget "$3"
	fi
	if [ ! -s "$1" ]; then
		echo "$1 -- $2 not downloaded. Exiting ..."
		sudo chown -R $USER "$toolsdir"
		sudo chmod -R +rwx "$toolsdir"
		exit 1
	fi
	if [ ! "$dont_check_size" = "1" ]; then
		if [ -s "$1" ]; then
			minimumsize=$4
			actualsize=$(du -b "$1" | cut -f 1)
			if [ ! "$actualsize" = "$minimumsize" ]; then
		    		echo "The $1 file was not correctly downloaded (its size is not correct). If the problem occurs again, download it from $3 and place it on $5. $actualsize = $minimumsize. Exiting ..."
		    		rm -f "$1"
				sudo chown -R $USER "$toolsdir"
				sudo chmod -R +rwx "$toolsdir"
				exit 1
			fi
		else
			echo "The $1 file was not downloaded. If the problem occurs again, download it from $3 and place it on $5/. Exiting ..."
			sudo chown -R $USER "$toolsdir"
			sudo chmod -R +rwx "$toolsdir"
			exit 1
		fi
	fi
}

#-------------------------------------------------------------------------------------
Check_Installation(){
	# $file_to_check = file to check (ex: $toolsdir/bin/quantize-lm); $program_name = program name (ex: IRSTLM); $loc_var = local variable to change (ex: $did_irstlm); $recompile_moses = alert about need to recompile moses
	#$file_to_check="$1"
	#$program_name="$2"
	#$loc_var="$3"
	#$recompile_moses="$4"
	if [ ! -s "$1" ]; then
		echo "************************ $2 not correctly installed. Script will now exit."
		sed -i'' -e "s/^$3=.*$/$3=0/g" "$report_dir/$report"
		sudo chown -R $USER "$toolsdir"
		sudo chmod -R +rwx "$toolsdir"
		exit 1
	else
		echo "************************ $2 correctly installed."
		sed -i'' -e"s/^$3=.*$/$3=1/g" "$report_dir/$report"
		if [ "$4" = "1" ]; then
			if [ "$did_moses" = "1" ]; then
				echo "Even though Moses was already correctly installed, it needs to be reinstalled after having compiled $2."
				sed -i'' -e's/^did_moses=.*$/did_moses=0/g' "$report_dir/$report"
        did_moses=0
			fi
		fi
	fi
}

#-------------------------------------------------------------------------------------
initialize(){
#-------------------------------------------------------------------------------------
echo "****************************************** Initialize"

# Set and create necessary directories
#-------------------------------------------------------------------------------------

# Present working directory
prworkdir="$PWD"

# Directory with the tools used (Moses, IRSTLM, RandLM, MGIZA, ...)
if [ ! -d "$toolsdir" ]; then mkdir -p "$toolsdir"; fi

# Directory used for scoring the translations
scorersdir="$toolsdir/scorers"
if [ "$install_scorers" = "1" ]; then
	mkdir -p "$scorersdir"
fi

#Directory where most of the executables will be placed
if [ ! -d "$toolsdir/bin" ]; then
	mkdir -p "$toolsdir/bin"
fi

#include directory
if [ ! -d "$toolsdir/include" ]; then
	mkdir -p "$toolsdir/include"
fi

#Directory where Moses scripts and some other scripts will be located
mkdir -p "$toolsdir/scripts"

#-------------------------------------------------------------------------------------
# Prepare registration of installed tools, or check already installed tools
#-------------------------------------------------------------------------------------
cd "$toolsdir"
# if first run of this script ...
if [ ! -f "$report_dir/$report" ]; then
  echo "#========================================================================" > "$report_dir/$report"
  echo "MMMdir=$MMMdir" >> "$report_dir/$report"
  echo "Script=$0" >> "$report_dir/$report"
  echo "#========================================================================" >> "$report_dir/$report"
	echo "did_irstlm=" >> "$report_dir/$report"
	echo "did_randlm=" >> "$report_dir/$report"
	echo "did_mgiza=" >> "$report_dir/$report"
	echo "did_moses=" >> "$report_dir/$report"
	echo "did_scripts=" >> "$report_dir/$report"
	echo "did_scorers=" >> "$report_dir/$report"
	echo "did_democorpus=" >> "$report_dir/$report"
fi

source "$report_dir/$report">/dev/null
if [ "$use_local_packages" = "0" ]; then
	echo "****************************************** Downloading and checking necessary packages. This can take a while ..."
  if [ "$install_irstlm" == "1" ]; then
	  Clean_if_failure $did_irstlm "$toolsdir/$irstlmdir" "$toolsdir/$irstlmpack"
		Download_package "$package_dir/$irstlmpack" "IRSTLM" "$irstlmurl" "148954" "$package_dir" 
  fi
fi

if [ ! -s "$package_dir/$randlmpack" ]; then
	cp "$package_dir/$randlmpack" "$toolsdir"
fi

if [ ! -s "$package_dir/$mgizapack" ]; then
	cp "$package_dir/$mgizapack" "$toolsdir"
fi

if [ -f "$package_dir/$mosespack" ]; then
	cp "$package_dir/$mosespack" "$toolsdir"
fi

echo "****************************************** Finishing environment setting"
	
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu

PREFIX="$toolsdir"
if [ -d /lib64 ]; then
  LIBDIR="$PREFIX/lib64"
else
  LIBDIR="$PREFIX/lib"
fi
export PATH="$PREFIX"/bin${PATH:+:$PATH}
export LD_LIBRARY_PATH=$LIBDIR${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
export LIBRARY_PATH=$LIBDIR${LIBRARY_PATH:+:$LIBRARY_PATH}
export CPATH="$PREFIX"/include${CPATH:+:$CPATH}


if [ ! -d "$LIBDIR" ]; then
	mkdir -p "$LIBDIR"
fi
echo "Please enter your administrator (sudo) password in order to change the ownership and the permissions of the $PREFIX/include and $LIBDIR directories"
sudo chown -R $USER "$PREFIX/include"
sudo chmod -R +rwx "$PREFIX/include"
sudo chown -R $USER "$LIBDIR"
sudo chmod -R +rwx "$LIBDIR"

if [ -f "$report_dir/$report" ]; then
	source "$report_dir/$report" 2>/dev/null
fi

startcompiling=`date +day:%d/%m/%y-time:%H:%M:%S`
}

#-------------------------------------------------------------------------------------
install_irstlm(){
if [ "$did_irstlm" != "1" -a "$install_irstlm" = "1" ]; then

	echo "****************************************** Unpack and install IRSTLM ..."

	cd "$toolsdir"
	cp "$package_dir/$irstlmpack" "$toolsdir"
	tar -xzvf "$toolsdir/$irstlmpack"
	if [ -d "$toolsdir/$irstlmdir" ]; then
		mv -f "$toolsdir/$irstlmdir" "$toolsdir/$irstlmnewdir"
		mv -f "$toolsdir/$irstlmnewdir/configure.in" "$toolsdir/$irstlmnewdir/configure.ac"
	fi

	if [ -d "$toolsdir/$irstlmnewdir" ]; then
		cd "$toolsdir/$irstlmnewdir"
		./regenerate-makefiles.sh --force
		./configure --enable-optimization --prefix="$toolsdir" --libdir="$LIBDIR" --includedir="$PREFIX/include"
		make
		sudo make install
	fi

	sudo chown -R $USER "$toolsdir/$irstlmnewdir"
	sudo chmod -R +rwx "$toolsdir/$irstlmnewdir"
	cp -Rf "$toolsdir/$irstlmnewdir/scripts"/* "$toolsdir/scripts"

	Check_Installation "$toolsdir/bin/quantize-lm" "IRSTLM" "did_irstlm" "1"
else
	echo "************************ IRSTLM not selected or already correctly installed"
fi
}
#-------------------------------------------------------------------------------------
install_randlm(){
if [ "$did_randlm" != "1" -a "$install_randlm" = "1" ]; then

	echo "****************************************** Unpack and install RandLM ..."

	cp "$package_dir/$randlmpack" "$toolsdir"
	
	cd "$toolsdir"
	tar -xzvf "$toolsdir/$randlmpack"
	if [ -d "$toolsdir/$randlmdir" ]; then
		mv -f "$toolsdir/$randlmdir" "$toolsdir/$randlmnewdir" 2>/dev/null
	fi
	sudo chown -R $USER "$toolsdir/$randlmnewdir"
	sudo chmod -R +rwx "$toolsdir/$randlmnewdir"

	if [ -d "$toolsdir/$randlmnewdir" ]; then
		cd "$toolsdir/$randlmnewdir"

		export PATH=/usr/share/aclocal:/usr/share/aclocal-1.14:$PATH

		./autogen.sh

		sed -i'' -e'13i\AC_CONFIG_MACRO_DIR([m4])' "$toolsdir/$randlmnewdir/configure.ac"
		./configure --prefix="$toolsdir" --libdir="$LIBDIR" --includedir="$PREFIX/include"
		make
		sudo make install
	fi
	sudo chown -R $USER "$toolsdir/$randlmnewdir"
	sudo chmod -R +rwx "$toolsdir/$randlmnewdir"

	Check_Installation "$toolsdir/bin/buildlm" "RANDLM" "did_randlm" "1"
else
	echo "************************ RandLM not selected or already correctly installed"
fi
}
#-------------------------------------------------------------------------------------
install_mgiza(){
cd "$toolsdir"
if [ "$did_mgiza" != "1" -a "$install_mgiza" = "1" ]; then

	echo "****************************************** Unpack and install MGIZA ..."

	cp "$package_dir/$mgizapack" "$toolsdir"

	if [ -f "$toolsdir/$mgizapack" ]; then
    cd "$toolsdir"
		tar -xzvf "$toolsdir/$mgizapack"
		cd "$toolsdir/$mgizadir/mgizapp"
    cmake . -DCMAKE_INSTALL_PREFIX="$toolsdir/$mgizanewdir"
    make
    sudo make install
		
		sudo chown -R $USER "$toolsdir/$mgizanewdir"
		sudo chmod -R +rwx "$toolsdir/$mgizanewdir"
		rm -rf "$toolsdir/$mgizadir"
	fi
	echo "***** Copy merge_alignment.py"
	cp "$package_dir/merge_alignment.py" "$toolsdir/$mgizanewdir/bin/"
	cp "$package_dir/merge_alignment.py" "$toolsdir/bin/"

	Check_Installation "$toolsdir/$mgizanewdir/bin/symal" "MGIZA" "did_mgiza" "0"
else
	echo "************************ MGIZA not selected or already correctly installed"
fi
}
#-------------------------------------------------------------------------------------
check_moses_compilable(){
	if [ "$1" != "1" ]; then
		echo "Moses cannot be compiled with the options you have choosen: $1 = 0"
		sudo chown -R $USER "$toolsdir"
		sudo chmod -R +rwx "$toolsdir"
		exit 1
	fi
}

#-------------------------------------------------------------------------------------
install_moses(){
cd "$toolsdir"
if [ "$did_moses" != "1" -a "$install_moses" = "1" ]; then

	echo "****************************************** Unpack and install Moses ..."
	mkdir "$toolsdir/$mosesnewdir"
	cp "$package_dir/$mosespack" "$toolsdir/$mosesnewdir"
	tar -xvzf "$toolsdir/$mosesnewdir/$mosespack"
	mv -f "$toolsdir/$mosesdefaultdir"/* "$toolsdir/$mosesnewdir"  2>/dev/null
	sudo chown -R $USER "$toolsdir/bin"
	sudo chmod -R +rwx "$toolsdir/bin"
	sudo chown -R $USER "$toolsdir/$mosesnewdir"
	sudo chmod -R +rwx "$toolsdir/$mosesnewdir"
	sudo chown -R $USER "$PREFIX/include"
	sudo chmod -R +rwx "$PREFIX/include"
	sudo chown -R $USER "$LIBDIR"
	sudo chmod -R +rwx "$LIBDIR"

	#Update a mlocate database
	sudo updatedb

	source "$report_dir/$report"
	options=""
	if [ "$did_irstlm" = "1" ]; then
		check_moses_compilable $did_irstlm 
		options+=" --with-irstlm=$PREFIX " 
	fi
	if [ "$did_randlm" = "1" ]; then
		check_moses_compilable $did_randlm 
		options+=" --with-randlm=$PREFIX " 
	fi

	cd "$toolsdir/$mosesnewdir"
	sudo ./bjam -a -j$cores --prefix="$PREFIX" --libdir="$LIBDIR" --includedir="$PREFIX/include" --max-kenlm-order=9 --max-factors=1 --notrace --static $options 
  find "$toolsdir/$mosesnewdir" -executable -type f -not -name "*.*" -exec cp -R {} "$toolsdir/bin" \; 2>/dev/null

	sudo chown -R $USER "$toolsdir/$mosesnewdir"
	sudo chmod -R +rwx "$toolsdir/$mosesnewdir"
	mkdir -p /tmp/irstlm
	cp -Rf "$toolsdir/$mosesnewdir/scripts"/* "$toolsdir/scripts"
	cp -f "$toolsdir/bin/symal" "$toolsdir/$mosesnewdir/bin"
	cp -f "$toolsdir/$mosesnewdir/mert/kbmira" "$toolsdir/bin"
	cp -f "$toolsdir/$mosesnewdir/mert/mert" "$toolsdir/bin"
	cp -f "$toolsdir/$mosesnewdir/mert/pro" "$toolsdir/bin"
	cp -f "$toolsdir/$mosesnewdir/contrib/relent-filter/scripts"/* "$toolsdir/scripts"
	if [ -f "$package_dir/$megampack" ]; then
		cp "$package_dir/$megampack" "$toolsdir/bin"
		sudo chown -R $USER "$toolsdir/bin/$megampack"
		sudo chmod -R +x "$toolsdir/bin/$megampack"
	fi

	Check_Installation "$toolsdir/bin/moses" "Moses" "did_moses" "0"
else
	echo "************************ Moses not selected or already correctly installed"
	export SCRIPTS_ROOTDIR="$toolsdir/$mosesnewdir/scripts"
fi
}
#-------------------------------------------------------------------------------------
install_moses_scripts(){
cd "$toolsdir"
if [ "$did_scripts" != "1" -a "$install_scripts" = "1" ]; then

	echo "************************ Copy nonbreaking_prefix files ..."

	mkdir -p "$toolsdir/scripts/tokenizer/nonbreaking_prefixes"
	cp -f "$package_dir/nonbreaking_prefixes"/* "$toolsdir/scripts/tokenizer/nonbreaking_prefixes"

	sudo chown -R $USER "$toolsdir/scripts"
	sudo chmod -R +rwx "$toolsdir/scripts"

	Check_Installation "$toolsdir/scripts/tokenizer/nonbreaking_prefixes/nonbreaking_prefix.pt" "nonbreaking_prefix.pt" "did_scripts" "0"
else
	echo "************************ Moses scripts and nonbreaking_prefix files not selected or already correctly installed"
fi
}
#-------------------------------------------------------------------------------------
copy_corpus(){
	cd "$prworkdir"
  cp -Rf "$MMMdir/data-files"/* "$mosesdir/"
  Check_Installation "$mosesdir/translation_input/200000.for_test.pt" "Demo Corpus" "did_democorpus" "0"
}

#-------------------------------------------------------------------------------------
install_other_scorers(){
cd "$toolsdir"
if [ "$did_scorers" != "1" -a "$install_scorers" = "1" ]; then
	echo "************************ Copy other scorers ..."
	cp -Rf "$package_dir/scorers"/* "$scorersdir"
	sudo chown -R $USER "$scorersdir"
	sudo chmod -R +rwx "$scorersdir"
	Check_Installation "$scorersdir/bleu-1.04.pl" "Scorers" "did_scorers" "0"
else
	echo "************************ Scorers not selected or already correctly installed"
fi
}

finalize(){
#-------------------------------------------------------------------------------------
#Make executables executable
sudo chown -R $USER "$toolsdir"
sudo chmod -R +rwx "$toolsdir"

#Update a mlocate database
echo "Update the mlocate database (this requires admin privileges)"
sudo updatedb

cd "$toolsdir"
if [ -f "$report_dir/$reporte" ]; then
	rm "$report_dir/$reporte" > /dev/null
fi

rm "$toolsdir/$irstlmpack" > /dev/null 2>&1
rm "$toolsdir/$randlmpack" > /dev/null 2>&1
rm "$toolsdir/$mgizapack" > /dev/null 2>&1
rm "$toolsdir/$mosesnewdir/$mosespack" > /dev/null 2>&1
rm "$toolsdir/$mosespack" > /dev/null 2>&1
rm "$toolsdir/$scriptspack" > /dev/null 2>&1

rm -rf "$toolsdir/$irstlmnewdir" > /dev/null 2>&1
rm -rf "$toolsdir/$randlmnewdir" > /dev/null 2>&1
rm -rf "$toolsdir/$mosesnewdir" > /dev/null 2>&1

#rm "$mosesdir/create.loge" > /dev/null 2>&1
}


#-------------------------------------------------------------------------------------
# MAIN PROGRAM
#-------------------------------------------------------------------------------------

{
  cd "$MMMdir/scripts"

  initialize
  install_irstlm
  install_randlm
  install_mgiza
  install_moses
  install_moses_scripts
  install_other_scorers
  copy_corpus
  finalize

  echo ""
  echo "+++++++++++++++++++++++++++++++++++++++++++++"
  echo ""
  echo "!!! Successful end of Moses installation. !!!"
  echo "Moses base directory located in $mosesdir"
  echo ""
  echo "Start:                $startdate"
  echo "End of downloads:     $startcompiling"
  d2=`date +%s`
  ((diff_sec=$d2-$d1))
  ((days=$diff_sec/86400))
  ((hours=($diff_sec%86400)/3600))
  ((minutes=($diff_sec%86400)%3600/60))
  ((seconds=$diff_sec-days*86400-hours*3600-minutes*60))
  echo "End of installation:  `date +day:%d/%m/%y-time:%H:%M:%S`"
  echo ""
  echo ""
  echo "The creation of Moses for Mere Mortals lasted for approximately $days days, $hours hours, $minutes minutes and $seconds seconds."
  echo ""
  echo "A report file has been created in $report_dir/$report."
  echo ""
  echo "A log file has been created in $log_dir/$logname.log."
  echo ""
  exit 0
} 2>&1 | tee "$log_dir/$logname.log"

#*************************************************************************************************
# Changes in version 1.43
#*************************************************************************************************
# First version for Ubuntu 14.04 and 12.04 LTS
# Uses Moses decoder 1.0 and a more recent (adapted) version of RandLM and more recent versions of IRSTLM and MGIZA
# megam compiled for a 64 bit environment
# Better log and report management
#*************************************************************************************************
# Changes in version 1.35
#*************************************************************************************************
# Uses new Moses decoder (published in August 13, 2010 and updated in August 14, 2010)
# Updates package dependencies
#Suppresses giza-pp installation (which is not used by the train script)
# Works in Ubuntu 10.04 LTS (and, if you adapt the package dependencies, with Ubuntu 9.10 and 9.04)
